// ===== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–¨ –õ–≠–ù–î–ò–ù–ì–ê "–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï" =====

document.addEventListener('DOMContentLoaded', function() {
    
    // ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–°–¢–ê–ù–¢–´ =====
    let currentSectionIndex = 0;
    let isScrolling = false;
    const scrollDelay = 800; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏ —Å–µ–∫—Ü–∏–π
    
    const sections = document.querySelectorAll('.landing-section');
    const navItems = document.querySelectorAll('.nav-item');
    const totalSections = sections.length;
    
    console.log(`üöÄ –õ—ç–Ω–¥–∏–Ω–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${totalSections} —Å–µ–∫—Ü–∏–π`);
    
    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    function initLanding() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é
        showSection(0);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        addScrollListeners();
        addNavigationListeners();
        addKeyboardListeners();
        
        console.log('‚úÖ –õ—ç–Ω–¥–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    }
    
    // ===== –ü–û–ö–ê–ó –°–ï–ö–¶–ò–ò =====
    function showSection(index) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if (index < 0 || index >= totalSections) return;
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
        sections.forEach(section => {
            section.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        navItems.forEach(item => {
            item.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            sections[index].classList.add('active');
            navItems[index].classList.add('active');
        }, 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        currentSectionIndex = index;
        
        console.log(`üìç –ü–æ–∫–∞–∑–∞–Ω–∞ —Å–µ–∫—Ü–∏—è ${index}: ${sections[index].id}`);
    }
    
    // ===== –ü–†–û–ö–†–£–¢–ö–ê –ö–û–õ–ï–°–û–ú –ú–´–®–ò =====
    function addScrollListeners() {
        let wheelTimeout;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏
        document.addEventListener('wheel', function(e) {
            e.preventDefault();
            
            // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if (isScrolling) return;
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
            clearTimeout(wheelTimeout);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            wheelTimeout = setTimeout(() => {
                const direction = e.deltaY > 0 ? 1 : -1; // –í–Ω–∏–∑ = 1, –í–≤–µ—Ä—Ö = -1
                
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                const newIndex = currentSectionIndex + direction;
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                if (newIndex >= 0 && newIndex < totalSections) {
                    isScrolling = true;
                    showSection(newIndex);
                    
                    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                    setTimeout(() => {
                        isScrolling = false;
                    }, scrollDelay);
                }
            }, 50); // –î–µ–±–∞—É–Ω—Å 50–º—Å
            
        }, { passive: false });
        
        console.log('üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ö–õ–ò–ö–£ =====
    function addNavigationListeners() {
        navItems.forEach((item, index) => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                
                // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                if (isScrolling) return;
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
                if (index !== currentSectionIndex) {
                    isScrolling = true;
                    showSection(index);
                    
                    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                    setTimeout(() => {
                        isScrolling = false;
                    }, scrollDelay);
                }
            });
        });
        
        console.log('üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    // ===== –ö–õ–ê–í–ò–ê–¢–£–†–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø =====
    function addKeyboardListeners() {
        document.addEventListener('keydown', function(e) {
            // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if (isScrolling) return;
            
            let newIndex = currentSectionIndex;
            
            switch(e.key) {
                case 'ArrowDown':
                case 'PageDown':
                case ' ': // –ü—Ä–æ–±–µ–ª
                    e.preventDefault();
                    newIndex = currentSectionIndex + 1;
                    break;
                    
                case 'ArrowUp':
                case 'PageUp':
                    e.preventDefault();
                    newIndex = currentSectionIndex - 1;
                    break;
                    
                case 'Home':
                    e.preventDefault();
                    newIndex = 0;
                    break;
                    
                case 'End':
                    e.preventDefault();
                    newIndex = totalSections - 1;
                    break;
                    
                default:
                    // –¶–∏—Ñ—Ä—ã 1-9 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                    const num = parseInt(e.key);
                    if (num >= 1 && num <= 9 && num <= totalSections) {
                        e.preventDefault();
                        newIndex = num - 1;
                    }
                    break;
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é
            if (newIndex >= 0 && newIndex < totalSections && newIndex !== currentSectionIndex) {
                isScrolling = true;
                showSection(newIndex);
                
                setTimeout(() => {
                    isScrolling = false;
                }, scrollDelay);
            }
        });
        
        console.log('‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }
    
    // ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    window.scrollToSection = function(sectionId) {
        const targetSection = document.getElementById(sectionId);
        if (!targetSection) return;
        
        const targetIndex = Array.from(sections).indexOf(targetSection);
        if (targetIndex !== -1) {
            isScrolling = true;
            showSection(targetIndex);
            
            setTimeout(() => {
                isScrolling = false;
            }, scrollDelay);
        }
    };
    
    // –°–ª–µ–¥—É—é—â–∞—è —Å–µ–∫—Ü–∏—è
    window.nextSection = function() {
        if (currentSectionIndex < totalSections - 1) {
            isScrolling = true;
            showSection(currentSectionIndex + 1);
            
            setTimeout(() => {
                isScrolling = false;
            }, scrollDelay);
        }
    };
    
    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ–∫—Ü–∏—è
    window.prevSection = function() {
        if (currentSectionIndex > 0) {
            isScrolling = true;
            showSection(currentSectionIndex - 1);
            
            setTimeout(() => {
                isScrolling = false;
            }, scrollDelay);
        }
    };
    
    // ===== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´ –ó–ê–ü–ò–°–ò =====
    function initContactForm() {
        const form = document.querySelector('.contact-form');
        if (!form) return;
        
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(form);
            const data = {
                student_name: formData.get('student_name'),
                contact_method: formData.get('contact_method'),
                contact_info: formData.get('contact_info')
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
            if (!data.student_name || !data.contact_method || !data.contact_info) {
                showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!', 'error');
                return;
            }
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
            showNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            form.reset();
            
            console.log('üìù –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', data);
        });
        
        console.log('üìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
    function showNotification(message, type = 'info') {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 10000;
            background: ${type === 'success' ? 'rgba(16, 185, 129, 0.9)' : 'rgba(239, 68, 68, 0.9)'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        }, 5000);
    }
    
    // ===== –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–ò –ü–†–û–ö–†–£–¢–ö–ï =====
    function addScrollAnimations() {
        // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const animatedElements = document.querySelectorAll(`
            .pricing-card,
            .review-placeholder,
            .contact-item,
            .feature-item,
            .screenshot-placeholder,
            .chart-placeholder
        `);
        
        animatedElements.forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(30px)';
            el.style.transition = 'all 0.6s ease';
            observer.observe(el);
        });
        
        console.log('‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    // ===== –ü–õ–ê–í–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê =====
    function initTypewriter() {
        const typewriterElements = document.querySelectorAll('[data-typewriter]');
        
        typewriterElements.forEach(element => {
            const text = element.textContent;
            const speed = parseInt(element.dataset.typewriter) || 50;
            
            element.textContent = '';
            element.style.borderRight = '2px solid var(--text-accent)';
            
            let i = 0;
            const timer = setInterval(() => {
                element.textContent += text[i];
                i++;
                
                if (i >= text.length) {
                    clearInterval(timer);
                    // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        element.style.borderRight = 'none';
                    }, 2000);
                }
            }, speed);
        });
    }
    
    // ===== –≠–§–§–ï–ö–¢ –ü–ê–†–ê–õ–õ–ê–ö–°–ê –î–õ–Ø –§–û–ù–ê =====
    function addParallaxEffect() {
        document.addEventListener('mousemove', (e) => {
            const mouseX = e.clientX / window.innerWidth;
            const mouseY = e.clientY / window.innerHeight;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const backgroundContainer = document.querySelector('.background-container');
            if (backgroundContainer) {
                const moveX = (mouseX - 0.5) * 20;
                const moveY = (mouseY - 0.5) * 20;
                
                backgroundContainer.style.transform = `translate(${moveX}px, ${moveY}px)`;
            }
        });
        
        console.log('üåå –≠—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // ===== –ê–î–ê–ü–¢–ò–í–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• =====
    function initMobileNavigation() {
        const nav = document.querySelector('.landing-nav');
        let lastScrollY = window.scrollY;
        
        // –°–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        window.addEventListener('scroll', () => {
            if (window.innerWidth <= 768) {
                if (window.scrollY > lastScrollY && window.scrollY > 100) {
                    nav.style.transform = 'translateY(-100%)';
                } else {
                    nav.style.transform = 'translateY(0)';
                }
                lastScrollY = window.scrollY;
            }
        });
        
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    // ===== –ó–ê–ü–£–°–ö –í–°–ï–• –§–£–ù–ö–¶–ò–ô =====
    initLanding();
    initContactForm();
    addScrollAnimations();
    addParallaxEffect();
    initMobileNavigation();
    
    // –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(initTypewriter, 1000);
    
    console.log('üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª—ç–Ω–¥–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω—ã!');
});

// ===== –£–¢–ò–õ–ò–¢–´ =====

// –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫)
function smoothScrollTo(target, duration = 800) {
    const targetElement = document.querySelector(target);
    if (!targetElement) return;
    
    const targetPosition = targetElement.offsetTop;
    const startPosition = window.pageYOffset;
    const distance = targetPosition - startPosition;
    let startTime = null;
    
    function animation(currentTime) {
        if (startTime === null) startTime = currentTime;
        const timeElapsed = currentTime - startTime;
        const run = ease(timeElapsed, startPosition, distance, duration);
        window.scrollTo(0, run);
        if (timeElapsed < duration) requestAnimationFrame(animation);
    }
    
    // Easing —Ñ—É–Ω–∫—Ü–∏—è
    function ease(t, b, c, d) {
        t /= d / 2;
        if (t < 1) return c / 2 * t * t + b;
        t--;
        return -c / 2 * (t * (t - 2) - 1) + b;
    }
    
    requestAnimationFrame(animation);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}

console.log('üöÄ Landing.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!');