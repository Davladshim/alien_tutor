// ===== –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ò–ì–†–ê - –ë–ê–ó–û–í–ê–Ø –õ–û–ì–ò–ö–ê =====

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let gameState = {
    dailyScore: 0,
    starsFound: 0,
    starsTotal: 5,
    cometsCount: 0,
    cometsMax: 5,
    hasShip: false,
    gameStarted: false,
    gameCompleted: false
};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    initGameInterface();
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    setTimeout(() => {
        showGameReady();
    }, 2000);
});

// ===== –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê =====

function initGameInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats();
    

    
    console.log('üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

function updateStats() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    document.getElementById('dailyScore').textContent = gameState.dailyScore;
    document.getElementById('starsFound').textContent = `${gameState.starsFound}/${gameState.starsTotal}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º–∞–Ω
    updatePocket();
}

function updatePocket() {
    const pocketIcon = document.getElementById('pocketIcon');
    const pocketStatus = document.getElementById('pocketStatus');
    const pocketCard = pocketIcon.closest('.stat-item'); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å .stat-card –Ω–∞ .stat-item
    
    if (gameState.hasShip) {
        pocketIcon.textContent = 'üõ∏';
        pocketStatus.textContent = '–¢–∞—Ä–µ–ª–∫–∞';
        pocketCard.classList.add('pocket-has-ship');
    } else {
        pocketIcon.textContent = 'üëΩ';
        pocketStatus.textContent = '–ü—É—Å—Ç–æ';
        pocketCard.classList.remove('pocket-has-ship');
    }
}

// ===== –ì–ï–ù–ï–†–ê–¢–û–† –õ–ê–ë–ò–†–ò–ù–¢–ê =====

const CELL_SIZE = 32; // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
const PLAYER_SIZE = '1.8rem'; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞

let maze = [];
let mazeWidth = 0;
let mazeHeight = 0;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ (–≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏)
function generateMaze() {
    const container = document.getElementById('mazeContainer');
    const containerRect = container.getBoundingClientRect();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
    mazeWidth = Math.floor((containerRect.width - 40) / CELL_SIZE);
    mazeHeight = Math.floor((containerRect.height - 40) / CELL_SIZE);
    
    console.log(`üß© –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç ${mazeWidth}x${mazeHeight} —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏`);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —è—á–µ–µ–∫ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
    const grid = [];
    for (let y = 0; y < mazeHeight; y++) {
        grid[y] = [];
        for (let x = 0; x < mazeWidth; x++) {
            grid[y][x] = {
                x: x,
                y: y,
                walls: [true, true, true, true], // top, right, bottom, left  
                visited: false
            };
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    carvePassages(grid, 0, 0);
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    renderMazeWithBorders(grid);
}

// –ê–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ –≤ —Ç–≤–æ–µ–º –ø—Ä–∏–º–µ—Ä–µ
function carvePassages(grid, startX, startY) {
    const stack = [];
    const start = grid[startY][startX];
    start.visited = true;
    stack.push(start);

    while (stack.length > 0) {
        const current = stack.pop();
        const neighbors = getUnvisitedNeighbors(grid, current);

        if (neighbors.length > 0) {
            stack.push(current);
            const next = neighbors[Math.floor(Math.random() * neighbors.length)];
            removeWalls(current, next);
            next.visited = true;
            stack.push(next);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Ç–æ–Ω–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏
function renderMaze() {
    const container = document.getElementById('mazeContainer');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    const canvas = document.createElement('canvas');
    canvas.width = mazeWidth * CELL_SIZE;
    canvas.height = mazeHeight * CELL_SIZE;
    canvas.style.border = '2px solid #5ED9D7';
    canvas.style.borderRadius = '8px';
    canvas.style.boxShadow = '0 0 20px rgba(94, 217, 215, 0.4)';
    
    const ctx = canvas.getContext('2d');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–æ–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ª–∏–Ω–∏–π
    ctx.strokeStyle = "#5ED9D7";
    ctx.lineWidth = 2;
    ctx.shadowColor = "#5ED9D7";
    ctx.shadowBlur = 8;
    
    // –†–∏—Å—É–µ–º –¢–û–õ–¨–ö–û –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏ (–Ω–µ –±–ª–æ–∫–∏!)
    for (let y = 0; y < mazeHeight; y++) {
        for (let x = 0; x < mazeWidth; x++) {
            const pixelX = x * CELL_SIZE;
            const pixelY = y * CELL_SIZE;
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–µ–Ω–∞, —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü
            if (maze[y][x] === 1) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π –∏ —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ
                
                // –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
                if (y === 0 || maze[y-1][x] === 0) {
                    ctx.beginPath();
                    ctx.moveTo(pixelX, pixelY);
                    ctx.lineTo(pixelX + CELL_SIZE, pixelY);
                    ctx.stroke();
                }
                
                // –ü—Ä–∞–≤–∞—è –ª–∏–Ω–∏—è
                if (x === mazeWidth-1 || maze[y][x+1] === 0) {
                    ctx.beginPath();
                    ctx.moveTo(pixelX + CELL_SIZE, pixelY);
                    ctx.lineTo(pixelX + CELL_SIZE, pixelY + CELL_SIZE);
                    ctx.stroke();
                }
                
                // –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
                if (y === mazeHeight-1 || maze[y+1][x] === 0) {
                    ctx.beginPath();
                    ctx.moveTo(pixelX + CELL_SIZE, pixelY + CELL_SIZE);
                    ctx.lineTo(pixelX, pixelY + CELL_SIZE);
                    ctx.stroke();
                }
                
                // –õ–µ–≤–∞—è –ª–∏–Ω–∏—è
                if (x === 0 || maze[y][x-1] === 0) {
                    ctx.beginPath();
                    ctx.moveTo(pixelX, pixelY + CELL_SIZE);
                    ctx.lineTo(pixelX, pixelY);
                    ctx.stroke();
                }
            }
        }
    }
    
    ctx.shadowBlur = 0;
    container.appendChild(canvas);
    console.log('üé® –õ–∞–±–∏—Ä–∏–Ω—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω —Ç–æ–Ω–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏!');
}

// ===== –ò–ì–†–û–ö –í –õ–ê–ë–ò–†–ò–ù–¢–ï =====

let player = {
    x: 1, // –ü–æ–∑–∏—Ü–∏—è –≤ —è—á–µ–π–∫–∞—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    y: 1,
    element: null
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function createPlayer() {
    const container = document.getElementById('mazeContainer');
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
    const playerElement = document.createElement('div');
    playerElement.style.position = 'absolute';
    playerElement.style.fontSize = PLAYER_SIZE;
    playerElement.style.zIndex = '10';
    playerElement.style.transition = 'all 0.2s ease';
    playerElement.style.filter = 'drop-shadow(0 0 10px rgba(94, 217, 215, 0.8))';
    playerElement.textContent = 'üëΩ';
    playerElement.id = 'player';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    updatePlayerPosition(playerElement);
    
    container.appendChild(playerElement);
    player.element = playerElement;
    
    console.log('üëΩ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏', player.x, player.y);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updatePlayerPosition(element) {
    const container = document.getElementById('mazeContainer');
    const containerRect = container.getBoundingClientRect();
    const canvas = container.querySelector('canvas');
    
    if (canvas) {
        const canvasRect = canvas.getBoundingClientRect();
        const containerOffsetX = canvasRect.left - containerRect.left;
        const containerOffsetY = canvasRect.top - containerRect.top;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —è—á–µ–π–∫–µ
        const pixelX = containerOffsetX + (player.x * CELL_SIZE) + (CELL_SIZE / 2);
        const pixelY = containerOffsetY + (player.y * CELL_SIZE) + (CELL_SIZE / 2);
        
        element.style.left = pixelX + 'px';
        element.style.top = pixelY + 'px';
        element.style.transform = 'translate(-50%, -50%)'; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
function canMoveTo(x, y) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    if (x < 0 || x >= mazeWidth || y < 0 || y >= mazeHeight) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –±–ª–æ–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const blockAtTarget = gameElements.blocks.find(block => block.x === x && block.y === y);
    if (blockAtTarget) {
        return false; // –ë–ª–æ–∫ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–Ω—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
    const currentCell = window.mazeGrid[player.y][player.x];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    const dx = x - player.x;
    const dy = y - player.y;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (dx === 1) { // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
        return !currentCell.walls[1];
    } else if (dx === -1) { // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
        return !currentCell.walls[3];
    } else if (dy === 1) { // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
        return !currentCell.walls[2];
    } else if (dy === -1) { // –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        return !currentCell.walls[0];
    }
    
    return false;
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function movePlayer(dx, dy) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Ä—Ç–∞–ª–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
    startPortalTimer();
    const newX = player.x + dx;
    const newY = player.y + dy;
    
    if (canMoveTo(newX, newY)) {
        player.x = newX;
        player.y = newY;
        updatePlayerPosition(player.element);
        
        console.log(`üëΩ –ò–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –∫ (${player.x}, ${player.y})`);
    } else {
        console.log('üö´ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–µ–Ω–æ–π');
    }
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function handleGameKeys(event) {
    if (!gameState.gameStarted) return;
    
    switch(event.code) {
        case 'ArrowUp':
        case 'KeyW':
            console.log('üîº –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö');
            movePlayer(0, -1);
            event.preventDefault();
            break;
            
        case 'ArrowDown':
        case 'KeyS':
            console.log('üîΩ –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑');
            movePlayer(0, 1);
            event.preventDefault();
            break;
            
        case 'ArrowLeft':
        case 'KeyA':
            console.log('‚óÄÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ');
            movePlayer(-1, 0);
            event.preventDefault();
            break;
            
        case 'ArrowRight':
        case 'KeyD':
            console.log('‚ñ∂Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ');
            movePlayer(1, 0);
            event.preventDefault();
            break;
            
        case 'Space':
            console.log('üí• –î–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–æ–±–µ–ª)');
            handleSpaceAction();
            event.preventDefault();
            break;
    }
}

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞
function showGameStarted() {
    console.log('üéÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∞–±–∏—Ä–∏–Ω—Ç...');
    
    setTimeout(() => {
        generateMaze();
        createPlayer();
        initializeGameElements();
        console.log('‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–µ–ª–∫–∏ –∏–ª–∏ WASD –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è');
    }, 500);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–º–µ—Ç
    startCometSystem();
}

// ===== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò =====

function showGameReady() {
    const placeholder = document.querySelector('.maze-placeholder');
    if (placeholder) {
        placeholder.innerHTML = `
            <div class="placeholder-icon">üåå</div>
            <div class="placeholder-text">–õ–∞–±–∏—Ä–∏–Ω—Ç –≥–æ—Ç–æ–≤!</div>
            <div style="margin-top: 1rem; font-size: 1rem; opacity: 0.8;">–ù–∞–∂–º–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞—á–∞–ª–∞</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', handleGameStart);
    }
}

function handleGameStart(event) {
    if (!gameState.gameStarted) {
        gameState.gameStarted = true;
        console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        document.removeEventListener('keydown', handleGameStart);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        showGameStarted();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã
        document.addEventListener('keydown', handleGameKeys);
    }
}

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
function getUnvisitedNeighbors(grid, cell) {
    const neighbors = [];
    const { x, y } = cell;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–µ–π (–≤–≤–µ—Ä—Ö, –ø—Ä–∞–≤–æ, –≤–Ω–∏–∑, –ª–µ–≤–æ)
    if (y > 0 && !grid[y - 1][x].visited) neighbors.push(grid[y - 1][x]); // top
    if (x < mazeWidth - 1 && !grid[y][x + 1].visited) neighbors.push(grid[y][x + 1]); // right  
    if (y < mazeHeight - 1 && !grid[y + 1][x].visited) neighbors.push(grid[y + 1][x]); // bottom
    if (x > 0 && !grid[y][x - 1].visited) neighbors.push(grid[y][x - 1]); // left

    return neighbors;
}

function removeWalls(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;

    if (dx === 1) {
        a.walls[3] = false; // left wall of a
        b.walls[1] = false; // right wall of b
    } else if (dx === -1) {
        a.walls[1] = false; // right wall of a
        b.walls[3] = false; // left wall of b
    }

    if (dy === 1) {
        a.walls[0] = false; // top wall of a
        b.walls[2] = false; // bottom wall of b
    } else if (dy === -1) {
        a.walls[2] = false; // bottom wall of a
        b.walls[0] = false; // top wall of b
    }
}

function renderMazeWithBorders(grid) {
    const container = document.getElementById('mazeContainer');
    container.innerHTML = '';
    
    const canvas = document.createElement('canvas');
    canvas.width = mazeWidth * CELL_SIZE;
    canvas.height = mazeHeight * CELL_SIZE;
    canvas.style.border = '2px solid #5ED9D7';
    canvas.style.borderRadius = '8px';
    canvas.style.boxShadow = '0 0 20px rgba(94, 217, 215, 0.4)';
    
    const ctx = canvas.getContext('2d');
    ctx.strokeStyle = "#5ED9D7";
    ctx.lineWidth = 2;
    ctx.shadowColor = "#5ED9D7";
    ctx.shadowBlur = 8;

    // –†–∏—Å—É–µ–º —Å—Ç–µ–Ω—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
    for (let y = 0; y < mazeHeight; y++) {
        for (let x = 0; x < mazeWidth; x++) {
            const cell = grid[y][x];
            const pixelX = x * CELL_SIZE;
            const pixelY = y * CELL_SIZE;

            // –†–∏—Å—É–µ–º —Å—Ç–µ–Ω—ã —è—á–µ–π–∫–∏
            if (cell.walls[0]) { // top
                ctx.beginPath();
                ctx.moveTo(pixelX, pixelY);
                ctx.lineTo(pixelX + CELL_SIZE, pixelY);
                ctx.stroke();
            }
            if (cell.walls[1]) { // right
                ctx.beginPath();
                ctx.moveTo(pixelX + CELL_SIZE, pixelY);
                ctx.lineTo(pixelX + CELL_SIZE, pixelY + CELL_SIZE);
                ctx.stroke();
            }
            if (cell.walls[2]) { // bottom
                ctx.beginPath();
                ctx.moveTo(pixelX + CELL_SIZE, pixelY + CELL_SIZE);
                ctx.lineTo(pixelX, pixelY + CELL_SIZE);
                ctx.stroke();
            }
            if (cell.walls[3]) { // left
                ctx.beginPath();
                ctx.moveTo(pixelX, pixelY + CELL_SIZE);
                ctx.lineTo(pixelX, pixelY);
                ctx.stroke();
            }
        }
    }

    ctx.shadowBlur = 0;
    container.appendChild(canvas);
    console.log('üé® –õ–∞–±–∏—Ä–∏–Ω—Ç —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º grid –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    window.mazeGrid = grid;
}

// ===== –°–ò–°–¢–ï–ú–ê –ë–õ–û–ö–û–í –ò –≠–õ–ï–ú–ï–ù–¢–û–í =====

let gameElements = {
    blocks: [], // [{x, y, type: 'block'}]
    stars: [], // [{x, y, type: 'star', solved: false}]
    ship: null, // {x, y, type: 'ship'}
    newPortal: null, // {x, y, type: 'portal'}
    oldPortal: {x: 1, y: 1, type: 'oldPortal'} // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞
};

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç—É–ø–∏–∫–æ–≤ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
function findDeadEnds() {
    const deadEnds = [];
    
    for (let y = 0; y < mazeHeight; y++) {
        for (let x = 0; x < mazeWidth; x++) {
            const cell = window.mazeGrid[y][x];
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤
            let openWalls = 0;
            if (!cell.walls[0]) openWalls++; // top
            if (!cell.walls[1]) openWalls++; // right  
            if (!cell.walls[2]) openWalls++; // bottom
            if (!cell.walls[3]) openWalls++; // left
            
            // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 1 –ø—Ä–æ—Ö–æ–¥ = —Ç—É–ø–∏–∫, –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É
            // –ò—Å–∫–ª—é—á–∞–µ–º —Ç—É–ø–∏–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 4 –∫–ª–µ—Ç–æ–∫ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (1,1)
            const distanceFromStart = Math.abs(x - 1) + Math.abs(y - 1);
            if (openWalls === 1 && distanceFromStart > 4) {
                deadEnds.push({x, y});
            }
        }
    }
    
    console.log(`üè† –ù–∞–π–¥–µ–Ω–æ ${deadEnds.length} —Ç—É–ø–∏–∫–æ–≤`);
    return deadEnds;
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤: –ø–µ—Ä–≤—ã–π –≤ —Ç—É–ø–∏–∫–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—è–¥–æ–º
function placeBlocks() {
    const deadEnds = findDeadEnds();
    gameElements.blocks = [];
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É —Ç—É–ø–∏–∫–æ–≤ —Å–ª—É—á–∞–π–Ω–æ
    const shuffledDeadEnds = [...deadEnds].sort(() => Math.random() - 0.5);
    const selectedDeadEnds = shuffledDeadEnds.slice(0, Math.ceil(deadEnds.length / 2));

    selectedDeadEnds.forEach(deadEnd => {
        // –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ –≤—Å–µ–≥–¥–∞ –≤ —Ç—É–ø–∏–∫–µ
        gameElements.blocks.push({
            x: deadEnd.x,
            y: deadEnd.y,
            type: 'block',
            hits: 0,
            maxHits: 2,
            containsItem: null
        });
        
        // –ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Ä—è–¥–æ–º —Å —Ç—É–ø–∏–∫–æ–º
        const directions = [
            {dx: 0, dy: -1}, // –≤–≤–µ—Ä—Ö
            {dx: 1, dy: 0},  // –≤–ø—Ä–∞–≤–æ  
            {dx: 0, dy: 1},  // –≤–Ω–∏–∑
            {dx: -1, dy: 0}  // –≤–ª–µ–≤–æ
        ];
        
        const possiblePositions = [];
        
        directions.forEach(dir => {
            const newX = deadEnd.x + dir.dx;
            const newY = deadEnd.y + dir.dy;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥
            if (newX >= 0 && newX < mazeWidth && newY >= 0 && newY < mazeHeight) {
                const cell = window.mazeGrid[deadEnd.y][deadEnd.x];
                
                let wallIndex = -1;
                if (dir.dx === 0 && dir.dy === -1) wallIndex = 0; // –≤–≤–µ—Ä—Ö
                if (dir.dx === 1 && dir.dy === 0) wallIndex = 1;   // –≤–ø—Ä–∞–≤–æ
                if (dir.dx === 0 && dir.dy === 1) wallIndex = 2;   // –≤–Ω–∏–∑
                if (dir.dx === -1 && dir.dy === 0) wallIndex = 3;  // –≤–ª–µ–≤–æ
                
                if (wallIndex >= 0 && !cell.walls[wallIndex]) {
                    possiblePositions.push({x: newX, y: newY});
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º 1-2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞
        const additionalBlocks = Math.min(possiblePositions.length, Math.floor(Math.random() * 2) + 1);
        
        for (let i = 0; i < additionalBlocks; i++) {
            if (possiblePositions.length > 0) {
                const randomIndex = Math.floor(Math.random() * possiblePositions.length);
                const position = possiblePositions.splice(randomIndex, 1)[0];
                
                gameElements.blocks.push({
                    x: position.x,
                    y: position.y,
                    type: 'block',
                    hits: 0,
                    maxHits: 2,
                    containsItem: null
                });
            }
        }
    });
    
    console.log(`üß± –†–∞–∑–º–µ—â–µ–Ω–æ ${gameElements.blocks.length} –±–ª–æ–∫–æ–≤ (–≤ —Ç—É–ø–∏–∫–∞—Ö –∏ —Ä—è–¥–æ–º)`);
}

// –ü—Ä—è—á–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞ –±–ª–æ–∫–∞–º–∏
function hideElementsBehindBlocks() {
    const availableBlocks = [...gameElements.blocks];
    
    // –ü—Ä—è—á–µ–º 5 –∑–≤–µ–∑–¥
    for (let i = 0; i < 5; i++) {
        if (availableBlocks.length > 0) {
            const randomIndex = Math.floor(Math.random() * availableBlocks.length);
            const block = availableBlocks.splice(randomIndex, 1)[0];
            block.containsItem = 'star';
            
            gameElements.stars.push({
                x: block.x,
                y: block.y,
                type: 'star',
                solved: false,
                hidden: true
            });
        }
    }
    
    // –ü—Ä—è—á–µ–º —Ç–∞—Ä–µ–ª–∫—É
    if (availableBlocks.length > 0) {
        const randomIndex = Math.floor(Math.random() * availableBlocks.length);
        const block = availableBlocks.splice(randomIndex, 1)[0];
        block.containsItem = 'ship';
        
        gameElements.ship = {
            x: block.x,
            y: block.y,
            type: 'ship',
            hidden: true
        };
    }
    
    // –ü—Ä—è—á–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç–∞–ª
    if (availableBlocks.length > 0) {
        const randomIndex = Math.floor(Math.random() * availableBlocks.length);
        const block = availableBlocks.splice(randomIndex, 1)[0];
        block.containsItem = 'portal';
        
        gameElements.newPortal = {
            x: block.x,
            y: block.y,
            type: 'portal',
            hidden: true
        };
    }
    
    console.log('üéÅ –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø—Ä—è—Ç–∞–Ω—ã –∑–∞ –±–ª–æ–∫–∞–º–∏');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (—Å —É—á–µ—Ç–æ–º —Å—Ç–µ–Ω)
function getBlockNearPlayer() {
    const directions = [
        {dx: 0, dy: -1, wallIndex: 0}, // –≤–≤–µ—Ä—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é —Å—Ç–µ–Ω—É
        {dx: 1, dy: 0, wallIndex: 1},  // –≤–ø—Ä–∞–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤—É—é —Å—Ç–µ–Ω—É
        {dx: 0, dy: 1, wallIndex: 2},  // –≤–Ω–∏–∑, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω—é—é —Å—Ç–µ–Ω—É
        {dx: -1, dy: 0, wallIndex: 3}  // –≤–ª–µ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–≤—É—é —Å—Ç–µ–Ω—É
    ];
    
    for (let dir of directions) {
        const checkX = player.x + dir.dx;
        const checkY = player.y + dir.dy;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if (checkX < 0 || checkX >= mazeWidth || checkY < 0 || checkY >= mazeHeight) {
            continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–µ–Ω–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        const currentCell = window.mazeGrid[player.y][player.x];
        
        // –ï—Å–ª–∏ —Å—Ç–µ–Ω–∞ –µ—Å—Ç—å - –Ω–µ –º–æ–∂–µ–º –¥–æ—Å—Ç–∞—Ç—å –±–ª–æ–∫
        if (currentCell.walls[dir.wallIndex]) {
            continue; // –°—Ç–µ–Ω–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø
        }
        
        // –ò—â–µ–º –±–ª–æ–∫ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const block = gameElements.blocks.find(b => b.x === checkX && b.y === checkY);
        if (block) {
            console.log(`üî® –ë–ª–æ–∫ –Ω–∞–π–¥–µ–Ω! –ú–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –±–ª–æ–∫–æ–º –Ω–µ—Ç —Å—Ç–µ–Ω—ã.`);
            return block;
        }
    }
    
    console.log(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Ä—è–¥–æ–º (–∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–µ–Ω–∞–º–∏).`);
    return null;
}

// –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Å –¥–≤–æ–π–Ω—ã–º –≤–∑—Ä—ã–≤–æ–º!
function hitBlock(block) {
    block.hits++;
    
    if (block.hits === 1) {
        console.log('üî® –ü–ï–†–í–´–ô –£–î–ê–†! –ë–ª–æ–∫ —Ç—Ä–µ—â–∏—Ç –∏ –∫–∞–º–µ—à–∫–∏ —Ä–∞–∑–ª–µ—Ç–∞—é—Ç—Å—è...');
        
        // –ü–µ—Ä–≤—ã–π –≤–∑—Ä—ã–≤ - –±–ª–æ–∫ —Ç—Ä–µ—â–∏—Ç
        animateBlockDestroy(block.x, block.y);
        
        // –ú–µ–Ω—è–µ–º –≤–∏–¥ –±–ª–æ–∫–∞ –Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π
        setTimeout(() => {
            const blockElements = document.querySelectorAll('.block');
            blockElements.forEach(element => {
                const elementX = parseInt(element.getAttribute('data-x'));
                const elementY = parseInt(element.getAttribute('data-y'));
                
                if (elementX === block.x && elementY === block.y) {
                    element.textContent = 'üü´'; // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫
                    element.style.filter = 'drop-shadow(0 0 5px rgba(139, 69, 19, 0.6))';
                }
            });
        }, 200); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –≤–∑—Ä—ã–≤ –±—ã–ª –≤–∏–¥–µ–Ω
        
    } else if (block.hits >= block.maxHits) {
        console.log('üí• –í–¢–û–†–û–ô –£–î–ê–†! –ë–ª–æ–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä—É—à–µ–Ω! –ú–ï–ì–ê–í–ó–†–´–í!');
        
        // –í—Ç–æ—Ä–æ–π –≤–∑—Ä—ã–≤ - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ
        animateBlockDestroy(block.x, block.y);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ —Å–ø—Ä—è—Ç–∞–Ω–æ –∑–∞ –±–ª–æ–∫–æ–º
        setTimeout(() => {
            if (block.containsItem) {
                revealHiddenItem(block);
            }
        }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –±—ã–ª –≤–∑—Ä—ã–≤
        
        // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const blockIndex = gameElements.blocks.indexOf(block);
        if (blockIndex > -1) {
            gameElements.blocks.splice(blockIndex, 1);
        }
        
        // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
        setTimeout(() => {
            const blockElements = document.querySelectorAll('.block');
            blockElements.forEach(element => {
                const elementX = parseInt(element.getAttribute('data-x'));
                const elementY = parseInt(element.getAttribute('data-y'));
                
                if (elementX === block.x && elementY === block.y) {
                    element.remove();
                }
            });
            
        }, 100);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
function revealHiddenItem(block) {
    const {x, y} = block;
    
    switch(block.containsItem) {
        case 'star':
            console.log('‚≠ê –ù–∞–π–¥–µ–Ω–∞ –∑–≤–µ–∑–¥–∞!');
            const star = gameElements.stars.find(s => s.x === x && s.y === y);
            if (star) {
                star.hidden = false;
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–≤–µ–∑–¥—ã
                createGameElement(star.x, star.y, '‚≠ê', 'game-element star');
            }
            break;
            
        case 'ship':
            console.log('üõ∏ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞—Ä–µ–ª–∫–∞!');
            if (gameElements.ship) {
                gameElements.ship.hidden = false;
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∞—Ä–µ–ª–∫–∏
                createGameElement(gameElements.ship.x, gameElements.ship.y, 'üõ∏', 'game-element ship');
            }
            break;
            
        case 'portal':
            console.log('üåÄ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ä—Ç–∞–ª!');
            if (gameElements.newPortal) {
                gameElements.newPortal.hidden = false;
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ä—Ç–∞–ª–∞
                createGameElement(gameElements.newPortal.x, gameElements.newPortal.y, 'üåÄ', 'game-element portal');
            }
            break;
            
        default:
            console.log('üì¶ –ó–∞ –±–ª–æ–∫–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ');
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function renderGameElements() {
    const container = document.getElementById('mazeContainer');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫—Ä–æ–º–µ canvas –∏ –∏–≥—Ä–æ–∫–∞)
    const elementsToRemove = container.querySelectorAll('.game-element');
    elementsToRemove.forEach(el => el.remove());
    
    // –†–∏—Å—É–µ–º –±–ª–æ–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–∏–¥–æ–º
    gameElements.blocks.forEach(block => {
        const emoji = block.hits === 0 ? 'üß±' : 'üü´'; // –¶–µ–ª—ã–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π
        createGameElement(block.x, block.y, emoji, 'game-element block');
    });
    
    // –†–∏—Å—É–µ–º –≤–∏–¥–∏–º—ã–µ –∑–≤–µ–∑–¥—ã
    gameElements.stars.forEach(star => {
        if (!star.hidden) {
            createGameElement(star.x, star.y, '‚≠ê', 'game-element star');
        }
    });
    
    // –†–∏—Å—É–µ–º —Ç–∞—Ä–µ–ª–∫—É (–µ—Å–ª–∏ –≤–∏–¥–∏–º–∞)
    if (gameElements.ship && !gameElements.ship.hidden) {
        createGameElement(gameElements.ship.x, gameElements.ship.y, 'üõ∏', 'game-element ship');
    }
    
    // –†–∏—Å—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç–∞–ª (–µ—Å–ª–∏ –≤–∏–¥–µ–Ω)
    if (gameElements.newPortal && !gameElements.newPortal.hidden) {
        createGameElement(gameElements.newPortal.x, gameElements.newPortal.y, 'üåÄ', 'game-element portal');
    }
    
    // –†–∏—Å—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç–∞–ª (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞)
    if (gameElements.oldPortal) {
        createGameElement(gameElements.oldPortal.x, gameElements.oldPortal.y, 'üåÄ', 'game-element old-portal');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –ø–æ–ª–µ
function createGameElement(x, y, emoji, className) {
    const container = document.getElementById('mazeContainer');
    const element = document.createElement('div');
    
    element.className = className;
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    element.setAttribute('data-x', x);
    element.setAttribute('data-y', y);
    element.textContent = emoji;
    element.style.position = 'absolute';
    element.style.fontSize = '1.2rem';
    element.style.zIndex = '5';
    element.style.filter = 'drop-shadow(0 0 8px rgba(94, 217, 215, 0.6))';
    element.style.transition = 'all 0.2s ease';
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
    const canvas = container.querySelector('canvas');
    if (canvas) {
        const containerRect = container.getBoundingClientRect();
        const canvasRect = canvas.getBoundingClientRect();
        const containerOffsetX = canvasRect.left - containerRect.left;
        const containerOffsetY = canvasRect.top - containerRect.top;
        
        const pixelX = containerOffsetX + (x * CELL_SIZE) + (CELL_SIZE / 2);
        const pixelY = containerOffsetY + (y * CELL_SIZE) + (CELL_SIZE / 2);
        
        element.style.left = pixelX + 'px';
        element.style.top = pixelY + 'px';
        element.style.transform = 'translate(-50%, -50%)';
    }
    
    container.appendChild(element);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–æ–±–µ–ª–∞
function handleSpaceAction() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
    const nearbyBlock = getBlockNearPlayer();
    if (nearbyBlock) {
        hitBlock(nearbyBlock);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –∑–≤–µ–∑–¥–µ
    const currentStar = gameElements.stars.find(s => 
        s.x === player.x && s.y === player.y && !s.hidden && !s.solved
    );
    if (currentStar) {
        console.log('‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–≤–µ–∑–¥–∞! –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É...');
        openTaskModal(currentStar);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ
    if (gameElements.ship && 
        gameElements.ship.x === player.x && 
        gameElements.ship.y === player.y && 
        !gameElements.ship.hidden && 
        !gameState.hasShip) {
        
        console.log('üõ∏ –¢–∞—Ä–µ–ª–∫–∞ –≤–∑—è—Ç–∞ –≤ –∫–∞—Ä–º–∞–Ω!');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–ª–µ—Ç–∞ –≤ –∫–∞—Ä–º–∞–Ω
        const shipElement = document.querySelector('.ship');
        if (shipElement) {
            animateShipToInventory(shipElement);
        }
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –Ω–æ–≤–æ–º –ø–æ—Ä—Ç–∞–ª–µ
    if (gameElements.newPortal && 
        gameElements.newPortal.x === player.x && 
        gameElements.newPortal.y === player.y && 
        !gameElements.newPortal.hidden) {
        
        console.log('üåÄ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞...');
        checkPortalActivation();
        return;
    }
    
    console.log('‚ùì –†—è–¥–æ–º –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞
function checkPortalActivation() {
    const allStarsSolved = gameElements.stars.every(star => star.solved);
    
    console.log('üêõ DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç–∞–ª...');
    console.log('üêõ DEBUG: –í—Å–µ –∑–≤–µ–∑–¥—ã —Ä–µ—à–µ–Ω—ã?', allStarsSolved);
    console.log('üêõ DEBUG: –ï—Å—Ç—å —Ç–∞—Ä–µ–ª–∫–∞?', gameState.hasShip);
    console.log('üêõ DEBUG: –ó–≤–µ–∑–¥—ã –Ω–∞–π–¥–µ–Ω–æ:', gameState.starsFound);
    
    if (allStarsSolved && gameState.hasShip) {
        console.log('üéâ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –£–ª–µ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª!');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        showGameComplete();
        
    } else {
        let missing = [];
        if (!allStarsSolved) missing.push(`—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–≤–µ–∑–¥—ã (${gameState.starsFound}/5)`);
        if (!gameState.hasShip) missing.push('–≤–∑—è—Ç—å —Ç–∞—Ä–µ–ª–∫—É');
        
        console.log(`‚ùå –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ: ${missing.join(', ')}`);
        alert(`‚ùå –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ:\n${missing.join('\n')}`);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
function showGameComplete() {
    gameState.gameCompleted = true;
    
    const container = document.getElementById('mazeContainer');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const completionScreen = document.createElement('div');
    completionScreen.className = 'game-completion';
    completionScreen.innerHTML = `
        <div class="completion-content">
            <div class="completion-icon">üéâ</div>
            <div class="completion-title">–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</div>
            <div class="completion-subtitle">–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!</div>
            
            <div class="completion-stats">
                <div class="completion-stat">
                    <span class="stat-icon">üíé</span>
                    <span class="stat-text">–ë–∞–ª–ª–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${gameState.dailyScore}</span>
                </div>
                <div class="completion-stat">
                    <span class="stat-icon">‚≠ê</span>
                    <span class="stat-text">–ó–≤–µ–∑–¥ —Ä–µ—à–µ–Ω–æ: ${gameState.starsFound}/5</span>
                </div>
            </div>
            
            <div class="completion-message">–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –ª–∞–±–∏—Ä–∏–Ω—Ç —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!</div>
            
            <div class="completion-actions">
                <button onclick="goToMenu()" class="completion-btn menu">üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫–∞–º</button>
            </div>
        </div>
    `;
    
    container.appendChild(completionScreen);
    
    console.log('üöÄ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

// –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
function goToMenu() {
    window.location.href = '/student';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function initializeGameElements() {
    placeBlocks();
    hideElementsBehindBlocks();
    renderGameElements();
    
    console.log('üéÆ –í—Å–µ –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã!');
}

// ===== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–õ–Ø –ó–ê–î–ê–ß =====

let currentTask = {
    star: null,
    question: '',
    answer: '',
    attempts: 7
};

// –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testTasks = [
    { question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 + 3?', answer: '8' },
    { question: '–ß–µ–º—É —Ä–∞–≤–Ω–æ 7 √ó 4?', answer: '28' },
    { question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15 - 6?', answer: '9' },
    { question: '–ß–µ–º—É —Ä–∞–≤–Ω–æ 36 √∑ 6?', answer: '6' },
    { question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2¬≥ (–¥–≤–∞ –≤ –∫—É–±–µ)?', answer: '8' },
    { question: '–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–æ—Ä–µ–Ω—å –∏–∑ 25?', answer: '5' },
    { question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 12 + 8?', answer: '20' },
    { question: '–ß–µ–º—É —Ä–∞–≤–Ω–æ 9 √ó 3?', answer: '27' }
];

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∑–∞–¥–∞—á–µ–π
function openTaskModal(star) {
    currentTask.star = star;
    currentTask.attempts = 7;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
    const randomTask = testTasks[Math.floor(Math.random() * testTasks.length)];
    currentTask.question = randomTask.question;
    currentTask.answer = randomTask.answer;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('taskText').textContent = currentTask.question;
    document.getElementById('taskAnswer').value = '';
    document.getElementById('attemptsLeft').textContent = currentTask.attempts;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('taskModal');
    modal.classList.add('active');
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
        document.getElementById('taskAnswer').focus();
    }, 300);
    
    console.log('‚≠ê –û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –∑–∞–¥–∞—á–∏:', currentTask.question);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeTaskModal() {
    const modal = document.getElementById('taskModal');
    modal.classList.remove('active');
    currentTask.star = null;
    
    console.log('‚ùå –û–∫–Ω–æ –∑–∞–¥–∞—á–∏ –∑–∞–∫—Ä—ã—Ç–æ');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
function checkAnswer() {
    const userAnswer = document.getElementById('taskAnswer').value.trim();
    
    console.log('üêõ DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç:', userAnswer);
    console.log('üêõ DEBUG: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', currentTask.answer);
    console.log('üêõ DEBUG: –¢–µ–∫—É—â–∞—è –∑–≤–µ–∑–¥–∞:', currentTask.star);
    
    if (userAnswer === '') {
        alert('–í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç!');
        return;
    }
    
    if (userAnswer === currentTask.answer) {
        console.log('‚úÖ DEBUG: –û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!');
        
        // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—É
        if (currentTask.star) {
            console.log('üêõ DEBUG: –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—É...');
            currentTask.star.solved = true;
            currentTask.star.hidden = true;
            gameState.starsFound++;
            
            console.log('üêõ DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã...');
            addScore(10);
            
            console.log('üêõ DEBUG: –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç...');
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–∞–¥–∞ –∑–≤–µ–∑–¥—ã
            animateStarDestroy(currentTask.star.x, currentTask.star.y);

            // –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥—É —Å –ø–æ–ª—è
            currentTask.star.hidden = true;
            const starElements = document.querySelectorAll('.star');
            starElements.forEach(element => {
                const elementX = parseInt(element.getAttribute('data-x'));
                const elementY = parseInt(element.getAttribute('data-y'));
                
                if (elementX === currentTask.star.x && elementY === currentTask.star.y) {
                    element.remove();
                }
            });
            
            console.log('üêõ DEBUG: –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
        }
        
        closeTaskModal();
        
    } else {
        console.log('‚ùå DEBUG: –û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
        currentTask.attempts--;
        document.getElementById('attemptsLeft').textContent = currentTask.attempts;
        document.getElementById('taskAnswer').value = '';
        
        if (currentTask.attempts <= 0) {
            console.log('‚ùå –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!');
            alert('–ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–π –∑–≤–µ–∑–¥–µ –ø–æ–∑–∂–µ.');
            closeTaskModal();
        } else {
            console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å:', currentTask.attempts);
            alert(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${currentTask.attempts}`);
        }
    }
}

// –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
function skipTask() {
    console.log('‚è≠Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞');
    closeTaskModal();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const answerInput = document.getElementById('taskAnswer');
        if (answerInput) {
            answerInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    checkAnswer();
                }
            });
        }
    }, 1000);
});

// ===== –ß–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
function cheatRevealAll() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–≤–µ–∑–¥—ã
    gameElements.stars.forEach(star => {
        if (star.hidden) {
            star.hidden = false;
        }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–µ–ª–∫—É
    if (gameElements.ship && gameElements.ship.hidden) {
        gameElements.ship.hidden = false;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç–∞–ª
    if (gameElements.newPortal && gameElements.newPortal.hidden) {
        gameElements.newPortal.hidden = false;
    }
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    renderGameElements();
    
    console.log('üéÆ –ß–ò–¢: –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã!');
}

// –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ —ç–ª–µ–º–µ–Ω—Ç—É
function cheatTeleportTo(type, index = 0) {
    let target;
    
    switch(type) {
        case 'star':
            target = gameElements.stars[index];
            break;
        case 'ship':
            target = gameElements.ship;
            break;
        case 'portal':
        case 'newportal':
            target = gameElements.newPortal;
            break;
        case 'oldportal':
            target = gameElements.oldPortal;
            break;
        case 'block':
            target = gameElements.blocks[index];
            break;
    }
    
    if (target) {
        player.x = target.x;
        player.y = target.y;
        updatePlayerPosition(player.element);
        console.log(`üéÆ –ß–ò–¢: –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ ${type}!`);
    }
}

// –°—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–µ–ª–∫—É
function cheatGetShip() {
    gameState.hasShip = true;
    if (gameElements.ship) {
        gameElements.ship.hidden = true;
    }
    updateStats();
    renderGameElements();
    console.log('üéÆ –ß–ò–¢: –¢–∞—Ä–µ–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!');
}

// –†–µ—à–∏—Ç—å –≤—Å–µ –∑–≤–µ–∑–¥—ã
function cheatSolveAllStars() {
    gameElements.stars.forEach(star => {
        if (!star.solved) {
            star.solved = true;
            star.hidden = true;
            gameState.starsFound++;
            addScore(10);
        }
    });
    updateStats();
    renderGameElements();
    console.log('üéÆ –ß–ò–¢: –í—Å–µ –∑–≤–µ–∑–¥—ã —Ä–µ—à–µ–Ω—ã!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
window.cheatRevealAll = cheatRevealAll;
window.cheatTeleportTo = cheatTeleportTo;
window.cheatGetShip = cheatGetShip;
window.cheatSolveAllStars = cheatSolveAllStars;


console.log(`
üéÆ –ß–ò–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- cheatRevealAll() - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- cheatTeleportTo('star', 0) - —Ç–µ–ª–µ–ø–æ—Ä—Ç –∫ –ø–µ—Ä–≤–æ–π –∑–≤–µ–∑–¥–µ
- cheatTeleportTo('ship') - —Ç–µ–ª–µ–ø–æ—Ä—Ç –∫ —Ç–∞—Ä–µ–ª–∫–µ
- cheatTeleportTo('portal') - —Ç–µ–ª–µ–ø–æ—Ä—Ç –∫ –Ω–æ–≤–æ–º—É –ø–æ—Ä—Ç–∞–ª—É
- cheatTeleportTo('oldportal') - —Ç–µ–ª–µ–ø–æ—Ä—Ç –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ—Ä—Ç–∞–ª—É
- cheatGetShip() - –ø–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–µ–ª–∫—É
- cheatSolveAllStars() - —Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–≤–µ–∑–¥—ã
- cheatSpawnComet() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–µ—Ç—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (–æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞!)
function addScore(points) {
    gameState.dailyScore += points;
    updateStats();
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
    const scoreElement = document.getElementById('dailyScore');
    if (scoreElement) {
        scoreElement.style.background = 'rgba(251, 191, 36, 0.3)';
        scoreElement.style.transform = 'scale(1.1)';
        
        setTimeout(() => {
            scoreElement.style.background = '';
            scoreElement.style.transform = 'scale(1)';
        }, 500);
    }
    
    console.log(`üíé –î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤! –í—Å–µ–≥–æ: ${gameState.dailyScore}`);
}

// ===== –°–ò–°–¢–ï–ú–ê –ö–û–ú–ï–¢ =====

let cometSystem = {
    direction: Math.random() > 0.5 ? 'leftToRight' : 'rightToLeft', // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    nextCometTime: Date.now() + (Math.random() * 10 * 60 * 1000), // –°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–µ—Ç–∞ —á–µ—Ä–µ–∑ 0-10 –º–∏–Ω
    activeCometId: 0,
    isRunning: false
};

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–µ—Ç (—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
function startCometSystem() {
    if (cometSystem.isRunning) return;
    
    cometSystem.isRunning = true;
    console.log(`üå† –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–µ—Ç—É
    const cometInterval = setInterval(() => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–µ—Ç—ã –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
        if (gameState.gameCompleted || gameState.cometsCount >= gameState.cometsMax) {
            console.log('üå† –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)');
            clearInterval(cometInterval);
            cometSystem.isRunning = false;
            return;
        }
        
        if (Date.now() >= cometSystem.nextCometTime) {
            launchComet();
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–µ—Ç—É —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è (0-10 –º–∏–Ω)
            cometSystem.nextCometTime = Date.now() + (Math.random() * 10 * 60 * 1000);
        }
    }, 5000);
}

// –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–æ–º–µ—Ç—ã (—á–∏—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)
function launchComet() {
    if (gameState.gameCompleted) {
        return;
    }
    
    const container = document.getElementById('mazeContainer');
    const containerRect = container.getBoundingClientRect();
    
    const comet = document.createElement('div');
    comet.className = 'comet';
    comet.id = `comet-${cometSystem.activeCometId++}`;
    
    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–µ—Ç—ã
    const randomDirection = Math.random() > 0.5 ? 'leftToRight' : 'rightToLeft';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    comet.style.position = 'absolute';
    comet.style.fontSize = '2rem';
    comet.style.zIndex = '100';
    comet.style.cursor = 'pointer';
    comet.style.filter = 'drop-shadow(0 0 10px rgba(255, 215, 0, 0.8))';
    
    if (randomDirection === 'leftToRight') {
        comet.textContent = 'üå†';
        comet.style.left = (containerRect.width + 20) + 'px'; // –°—Ç–∞—Ä—Ç—É–µ—Ç —Å–ø—Ä–∞–≤–∞
        comet.style.top = '-50px';
        comet.dataset.direction = 'leftToRight';
    } else {
        comet.textContent = 'üå†';
        comet.style.transform = 'scaleX(-1)';
        comet.style.left = '-50px'; // –°—Ç–∞—Ä—Ç—É–µ—Ç —Å–ª–µ–≤–∞
        comet.style.top = '-50px';
        comet.dataset.direction = 'rightToLeft';
    }
    
    comet.onclick = () => catchComet(comet);
    
    container.appendChild(comet);
    animateComet(comet);
    
    console.log(`üå† –ö–æ–º–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞: ${randomDirection}`);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ –∫–æ–º–µ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ dataset)
function animateComet(comet) {
    const container = document.getElementById('mazeContainer');
    const containerRect = container.getBoundingClientRect();
    
    comet.style.position = 'absolute';
    comet.style.fontSize = '2rem';
    comet.style.zIndex = '100';
    comet.style.cursor = 'pointer';
    comet.style.filter = 'drop-shadow(0 0 10px rgba(255, 215, 0, 0.8))';
    comet.style.transition = 'all 8s linear';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
        const direction = comet.dataset.direction;
        
        if (direction === 'leftToRight') {
            // –ù–µ–æ—Ç–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω–∞—è: –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö ‚Üí –ª–µ–≤—ã–π –Ω–∏–∑ (–≤–¥–æ–ª—å —Ö–≤–æ—Å—Ç–∞)
            comet.style.right = 'auto';
            comet.style.left = '-50px';
            comet.style.top = (containerRect.height + 50) + 'px';
        } else {
            // –û—Ç–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω–∞—è: –ª–µ–≤—ã–π –≤–µ—Ä—Ö ‚Üí –ø—Ä–∞–≤—ã–π –Ω–∏–∑
            comet.style.left = (containerRect.width + 50) + 'px';
            comet.style.right = 'auto';
            comet.style.top = (containerRect.height + 50) + 'px';
        }
    }, 100);
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–µ—Ç—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        if (comet.parentNode) {
            comet.remove();
        }
    }, 8500);
}

// –õ–æ–≤–ª—è –∫–æ–º–µ—Ç—ã
// –õ–æ–≤–ª—è –∫–æ–º–µ—Ç—ã
function catchComet(comet) {
    if (gameState.cometsCount >= gameState.cometsMax) {
        return; // –£–∂–µ –ø–æ–π–º–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º (–Ω–æ —ç—Ç–æ —Å–µ–∫—Ä–µ—Ç!)
    }
    
    console.log(`üå† –ö–æ–º–µ—Ç–∞ –ø–æ–π–º–∞–Ω–∞! –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏...`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞—Å–ø–∞–¥–∞
    animateCometDestroy(comet);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    gameState.cometsCount++;
    gameState.dailyScore += 5;
    updateStats();
    
    console.log(`üå† –í—Å–µ–≥–æ –∫–æ–º–µ—Ç –ø–æ–π–º–∞–Ω–æ: ${gameState.cometsCount}/${gameState.cometsMax}`);
    console.log(`üíé +5 –±–∞–ª–ª–æ–≤! –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: ${gameState.dailyScore}`);
    
    // –£–±–∏—Ä–∞–µ–º –∫–æ–º–µ—Ç—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ (—á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å)
    setTimeout(() => {
        if (comet.parentNode) {
            comet.remove();
        }
    }, 100);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç–∞ (—Å–µ–∫—Ä–µ—Ç–Ω–æ)
    if (gameState.cometsCount >= gameState.cometsMax) {
        console.log('üå† –õ–∏–º–∏—Ç –∫–æ–º–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (—Å–µ–∫—Ä–µ—Ç–Ω–æ). –ù–æ–≤—ã–µ –∫–æ–º–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è.');
    }
}

// –ß–ò–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–µ—Ç—ã
function cheatSpawnComet() {
    launchComet();
    console.log('üéÆ –ß–ò–¢: –ö–æ–º–µ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Ç
window.cheatSpawnComet = cheatSpawnComet;

// ===== –ê–ù–ò–ú–ê–¶–ò–Ø –°–¢–ê–†–û–ì–û –ü–û–†–¢–ê–õ–ê =====

let portalTimer = null;
let playerHasMoved = false;

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–ª–∞ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function startPortalTimer() {
    if (playerHasMoved || portalTimer) return;
    
    playerHasMoved = true;
    console.log('üëΩ –ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ! –ü–æ—Ä—Ç–∞–ª –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
    
    portalTimer = setTimeout(() => {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        animatePortalDisappear();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Ä—Ç–∞–ª –≤—Å–µ –µ—â–µ –µ—Å—Ç—å, —É–¥–∞–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        setTimeout(() => {
            const portalElement = document.querySelector('.old-portal');
            if (portalElement) {
                console.log('üåÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞)');
                portalElement.remove();
                gameElements.oldPortal = null;
            }
        }, 3000);
        
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–ª–∞ (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
function animatePortalDisappear() {
    const portalElement = document.querySelector('.old-portal');
    
    if (portalElement) {
        console.log('üåÄ –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç–∞–ª –∏—Å—á–µ–∑–∞–µ—Ç (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ requestAnimationFrame
        portalElement.classList.add('disappearing');
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        const portalTimeout = setTimeout(() => {
            if (portalElement && portalElement.parentNode) {
                portalElement.remove();
                gameElements.oldPortal = null;
                console.log('üåÄ –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç–∞–ª –∏—Å—á–µ–∑ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)!');
            }
        }, 2100); // –ß—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ CSS (2000ms + –±—É—Ñ–µ—Ä)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        portalElement.dataset.timeoutId = portalTimeout;
    }
}

// ===== –ê–ù–ò–ú–ê–¶–ò–Ø –†–ê–°–ü–ê–î–ê –ó–í–ï–ó–î–´ =====

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–∞–¥–∞ –∑–≤–µ–∑–¥—ã –Ω–∞ —á–∞—Å—Ç–∏—á–∫–∏
// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–∞–¥–∞ –∑–≤–µ–∑–¥—ã –Ω–∞ —á–∞—Å—Ç–∏—á–∫–∏
function animateStarDestroy(x, y) {
    const container = document.getElementById('mazeContainer');
    const particleCount = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—á–µ–∫
    
    console.log('‚≠ê –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å–ø–∞–¥–∞ –∑–≤–µ–∑–¥—ã...');
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'star-particle';
        particle.textContent = '‚≠ê';
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const canvas = container.querySelector('canvas');
        if (canvas) {
            const containerRect = container.getBoundingClientRect();
            const canvasRect = canvas.getBoundingClientRect();
            const containerOffsetX = canvasRect.left - containerRect.left;
            const containerOffsetY = canvasRect.top - containerRect.top;
            
            const pixelX = containerOffsetX + (x * CELL_SIZE) + (CELL_SIZE / 2);
            const pixelY = containerOffsetY + (y * CELL_SIZE) + (CELL_SIZE / 2);
            
            particle.style.left = pixelX + 'px';
            particle.style.top = pixelY + 'px';
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–µ—Ç–∞ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫—Ä—É–≥—É)
        const angle = (i / particleCount) * Math.PI * 2;
        const distance = 40 + Math.random() * 30; // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 40-70px
        
        const moveX = Math.cos(angle) * distance;
        const moveY = Math.sin(angle) * distance;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        particle.style.setProperty('--move-x', moveX + 'px');
        particle.style.setProperty('--move-y', moveY + 'px');
        
        container.appendChild(particle);
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–∫—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (particle.parentNode) {
                particle.remove();
            }
        }, 1500);
    }
}

// ===== –ê–ù–ò–ú–ê–¶–ò–Ø –¢–ê–†–ï–õ–ö–ò –í –ö–ê–†–ú–ê–ù =====

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–ª–µ—Ç–∞ —Ç–∞—Ä–µ–ª–∫–∏ –≤ –∫–∞—Ä–º–∞–Ω
function animateShipToInventory(shipElement) {
    console.log('üõ∏ –¢–∞—Ä–µ–ª–∫–∞ –ª–µ—Ç–∏—Ç –≤ –∫–∞—Ä–º–∞–Ω...');
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –∫–∞—Ä–º–∞–Ω–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const pocketIcon = document.getElementById('pocketIcon');
    if (!pocketIcon || !shipElement) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    const shipRect = shipElement.getBoundingClientRect();
    const pocketRect = pocketIcon.getBoundingClientRect();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–ª–µ—Ç–∞
    const deltaX = pocketRect.left - shipRect.left + (pocketRect.width / 2);
    const deltaY = pocketRect.top - shipRect.top + (pocketRect.height / 2);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    shipElement.style.setProperty('--target-x', deltaX + 'px');
    shipElement.style.setProperty('--target-y', deltaY + 'px');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    shipElement.classList.add('ship-flying');
    
    // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º–∞–Ω
    setTimeout(() => {
        if (shipElement.parentNode) {
            shipElement.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä–º–∞–Ω–∞
        gameState.hasShip = true;
        if (gameElements.ship) {
            gameElements.ship.hidden = true;
        }
        updateStats();
        
        console.log('üõ∏ –¢–∞—Ä–µ–ª–∫–∞ –≤ –∫–∞—Ä–º–∞–Ω–µ!');
    }, 1000);
}

// ===== –ê–ù–ò–ú–ê–¶–ò–Ø –†–ê–°–ü–ê–î–ê –ö–û–ú–ï–¢–´ =====

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–ø–∞–¥–∞ –∫–æ–º–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏—á–∫–∏ (–∫–∞–∫ —É –∑–≤–µ–∑–¥—ã)
function animateCometDestroy(cometElement) {
    console.log('üå† –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞—Å–ø–∞–¥–∞ –∫–æ–º–µ—Ç—ã...');
    
    const container = document.getElementById('mazeContainer');
    const particleCount = 6; // –ß—É—Ç—å –º–µ–Ω—å—à–µ —á–∞—Å—Ç–∏—á–µ–∫ —á–µ–º —É –∑–≤–µ–∑–¥—ã
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–æ–º–µ—Ç—ã
    const cometRect = cometElement.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();
    
    const centerX = cometRect.left - containerRect.left + (cometRect.width / 2);
    const centerY = cometRect.top - containerRect.top + (cometRect.height / 2);
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'star-particle'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å —á—Ç–æ —É –∑–≤–µ–∑–¥—ã
        particle.textContent = '‚≠ê'; // –†–∞—Å–ø–∞–¥–∞–µ—Ç—Å—è –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
        
        particle.style.left = centerX + 'px';
        particle.style.top = centerY + 'px';
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–µ—Ç–∞ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫—Ä—É–≥—É)
        const angle = (i / particleCount) * Math.PI * 2;
        const distance = 30 + Math.random() * 25; // –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–∏–π —Ä–∞–∑–ª–µ—Ç —á–µ–º —É –∑–≤–µ–∑–¥—ã
        
        const moveX = Math.cos(angle) * distance;
        const moveY = Math.sin(angle) * distance;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        particle.style.setProperty('--move-x', moveX + 'px');
        particle.style.setProperty('--move-y', moveY + 'px');
        
        container.appendChild(particle);
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–∫—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (particle.parentNode) {
                particle.remove();
            }
        }, 1500);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞ –±–ª–æ–∫–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º –±–ª–æ–∫–æ–º
function animateBlockDestroy(x, y) {
    const container = document.getElementById('mazeContainer');
    
    console.log('üß± –í–ó–†–´–í! –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ...');
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –±–ª–æ–∫–∞ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
    const fragmentData = [
        {w: 8, h: 10, offsetX: 0, offsetY: 0},
        {w: 10, h: 8, offsetX: 8, offsetY: 0},
        {w: 8, h: 8, offsetX: 18, offsetY: 0},
        {w: 6, h: 12, offsetX: 0, offsetY: 10},
        {w: 12, h: 6, offsetX: 6, offsetY: 10},
        {w: 8, h: 10, offsetX: 18, offsetY: 8},
        {w: 10, h: 5, offsetX: 0, offsetY: 22},
        {w: 8, h: 5, offsetX: 10, offsetY: 16},
        {w: 8, h: 10, offsetX: 18, offsetY: 18}
    ];
    
    // –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    const canvas = container.querySelector('canvas');
    let baseX, baseY;
    
    if (canvas) {
        const containerRect = container.getBoundingClientRect();
        const canvasRect = canvas.getBoundingClientRect();
        const containerOffsetX = canvasRect.left - containerRect.left;
        const containerOffsetY = canvasRect.top - containerRect.top;
        
        baseX = containerOffsetX + (x * CELL_SIZE);
        baseY = containerOffsetY + (y * CELL_SIZE);
    }
    
    fragmentData.forEach((fragData, index) => {
        const fragment = document.createElement('div');
        fragment.className = 'block-fragment';
        fragment.textContent = 'üü´';
        fragment.style.fontSize = '0.4rem'; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –∫—É—Å–æ—á–∫–∏
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        const startX = baseX + fragData.offsetX;
        const startY = baseY + fragData.offsetY;
        
        fragment.style.position = 'absolute';
        fragment.style.left = startX + 'px';
        fragment.style.top = startY + 'px';
        fragment.style.zIndex = '150';
        fragment.style.pointerEvents = 'none';
        fragment.style.transform = 'translate(0, 0) rotate(0deg)';
        fragment.style.transition = 'none';
        
        container.appendChild(fragment);
        
        // –§–∏–∑–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        const physics = {
            x: startX,
            y: startY,
            vx: (Math.random() - 0.5) * 8 + (index % 2 === 0 ? 3 : -3), // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X
            vy: Math.random() * -8 - 2, // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y (–≤–≤–µ—Ä—Ö —Å–Ω–∞—á–∞–ª–∞)
            rotation: 0,
            rotationSpeed: (Math.random() - 0.5) * 15, // –í—Ä–∞—â–µ–Ω–∏–µ
            gravity: 0.4 // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        };
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ñ–∏–∑–∏–∫–∏
        function animateFragment() {
            physics.x += physics.vx;
            physics.y += physics.vy;
            physics.vy += physics.gravity; // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            physics.rotation += physics.rotationSpeed;
            
            // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
            if (physics.y > window.innerHeight) {
                physics.vx *= 0.8;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            fragment.style.left = physics.x + 'px';
            fragment.style.top = physics.y + 'px';
            fragment.style.transform = `rotate(${physics.rotation}deg)`;
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if (physics.y < window.innerHeight + 100 && 
                physics.x > -100 && physics.x < window.innerWidth + 100) {
                requestAnimationFrame(animateFragment);
            } else {
                // –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –æ–Ω —É–ª–µ—Ç–µ–ª –∑–∞ —ç–∫—Ä–∞–Ω
                if (fragment.parentNode) {
                    fragment.remove();
                }
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        requestAnimationFrame(animateFragment);
    });
}