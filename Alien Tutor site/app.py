from flask import Flask, render_template
import requests  # ‚Üê –ü–ï–†–ï–ù–ï–° –ù–ê–í–ï–†–•

import psycopg2
import psycopg2.extras
from datetime import datetime, timedelta
import secrets
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

DATABASE_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT')),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD')
}

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DATABASE_CONFIG)
        return conn
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def execute_query(query, params=None, fetch=False, fetch_one=False):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å"""
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return None
    
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            cur.execute(query, params)
            
            if fetch_one:
                result = cur.fetchone()
            elif fetch:
                result = cur.fetchall()
            else:
                result = cur.rowcount
                
            conn.commit()
            return result
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()

def get_student_by_name(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    query = "SELECT * FROM students WHERE name = %s"
    result = execute_query(query, (student_name,), fetch_one=True)
    return dict(result) if result else None

def get_all_students():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    query = "SELECT * FROM students ORDER BY name"
    result = execute_query(query, fetch=True)
    return [dict(row) for row in result] if result else []

def check_user_login(login, password):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = "SELECT * FROM user_accounts WHERE login = %s AND password = %s"
    result = execute_query(query, (login, password), fetch_one=True)
    return dict(result) if result else None

def get_student_info(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ –ø–æ ID"""
    query = "SELECT * FROM students WHERE id = %s"
    result = execute_query(query, (student_id,), fetch_one=True)
    return dict(result) if result else None

def authenticate_user(login, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = """
        SELECT id, login, role, student_id, full_name 
        FROM user_accounts 
        WHERE login = %s AND password = %s
    """
    result = execute_query(query, (login, password), fetch_one=True)
    return dict(result) if result else None

def get_student_balance(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT 
            COALESCE(SUM(amount), 0) as balance,
            COALESCE(SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END), 0) as total_paid,
            COALESCE(SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END), 0) as total_spent
        FROM payments
        WHERE student_id = %s
    """
    result = execute_query(query, (student_id,), fetch_one=True)
    return dict(result) if result else {'balance': 0, 'total_paid': 0, 'total_spent': 0}

def get_student_lessons_count(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT 
            COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_lessons,
            COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_lessons,
            COUNT(CASE WHEN status = 'scheduled' AND date >= CURRENT_DATE THEN 1 END) as planned_lessons
        FROM lessons
        WHERE student_id = %s
    """
    result = execute_query(query, (student_id,), fetch_one=True)
    return dict(result) if result else {'completed_lessons': 0, 'cancelled_lessons': 0, 'planned_lessons': 0}

def get_student_schedule_data(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    from datetime import datetime, timedelta
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    sunday = monday + timedelta(days=6)
    
    query = """
        SELECT date, time, subject, status, lesson_duration
        FROM lessons
        WHERE student_id = %s
        AND date BETWEEN %s AND %s
        ORDER BY date, time
    """
    result = execute_query(query, (student_id, monday, sunday), fetch=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–¥–µ–ª–∏
    week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    week_data = []
    
    for i, day_name in enumerate(week_days):
        current_date = monday + timedelta(days=i)
        day_lessons = []
        
        if result:
            for lesson in result:
                if lesson['date'] == current_date:
                    day_lessons.append({
                        'time': lesson['time'].strftime('%H:%M'),
                        'subject': lesson['subject'],
                        'status': lesson['status']
                    })
        
        week_data.append({
            'day_name': day_name,
            'day_number': current_date.day,
            'full_date': current_date.strftime('%Y-%m-%d'),
            'is_today': current_date == today,
            'lessons': day_lessons
        })
    
    return {
        'week_data': week_data,
        'week_info': {
            'title': f'–ù–µ–¥–µ–ª—è {today.isocalendar()[1]}, {today.year}',
            'period': f'—Å {monday.strftime("%d.%m")} –ø–æ {sunday.strftime("%d.%m")}'
        }
    }

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
def get_student_lesson_reports(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —É—Ä–æ–∫–∞–º —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT lr.created_at, lr.topic, lr.understanding_level, 
               lr.teacher_comment, er.secondary_score
        FROM lesson_reports lr
        LEFT JOIN exam_results er ON lr.student_id = er.student_id 
                                  AND DATE(lr.created_at) = er.exam_date
        WHERE lr.student_id = %s
        ORDER BY lr.created_at DESC
        LIMIT 10
    """
    result = execute_query(query, (student_id,), fetch=True)
    
    lessons = []
    if result:
        for row in result:
            lessons.append({
                'date': row['created_at'].strftime('%d.%m.%Y'),
                'topic': row['topic'],
                'understanding': row['understanding_level'],
                'score': row['secondary_score'] or '',
                'feedback': row['teacher_comment']
            })
    
    return lessons

def get_student_homework(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT assignment_date, topic, primary_score, secondary_score, 
               design_score, solution_score, tasks_solved, tasks_assigned
        FROM homework_assignments
        WHERE student_id = %s
        ORDER BY assignment_date DESC
        LIMIT 10
    """
    result = execute_query(query, (student_id,), fetch=True)
    
    homework = []
    if result:
        for row in result:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –±–∞–ª–ª—ã –≤–æ –≤—Ç–æ—Ä–∏—á–Ω—ã–µ (–ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
            secondary_score = row['secondary_score'] or row['primary_score'] or 0
            
            homework_item = {
                'date': row['assignment_date'].strftime('%d.%m.%Y'),
                'topic': row['topic'],
                'primary_score': row['primary_score'] or 0,
                'secondary_score': secondary_score,
                'design_score': row['design_score'] or 0,  # ‚Üê –í–ê–ñ–ù–û: —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                'solution_score': row['solution_score'] or 0,  # ‚Üê –í–ê–ñ–ù–û: —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
                'tasks_solved': row['tasks_solved'] or 0,
                'tasks_assigned': row['tasks_assigned'] or 0
            }
            
            homework.append(homework_item)
            
            # –î–æ–±–∞–≤—å –æ—Ç–ª–∞–¥–∫—É
            print(f"üîç –î–û–ú–ê–®–ö–ê: {homework_item['date']} - –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {homework_item['design_score']}, –†–µ—à–µ–Ω–∏–µ: {homework_item['solution_score']}")
    
    print(f"üîç –í–°–ï–ì–û –î–û–ú–ê–®–ï–ö: {len(homework)}")
    return homework

def get_student_exam_results(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–±–Ω–∏–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT exam_date, primary_score, secondary_score
        FROM exam_results
        WHERE student_id = %s
        ORDER BY exam_date DESC
        LIMIT 10
    """
    result = execute_query(query, (student_id,), fetch=True)
    
    exam_scores = []
    if result:
        for row in result:
            exam_scores.append({
                'date': row['exam_date'].strftime('%d.%m'),
                'score': row['secondary_score'] or row['primary_score'] or 0
            })
    
    return exam_scores

def get_student_topic_progress(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT understanding_level, COUNT(*) as count
        FROM lesson_reports
        WHERE student_id = %s
        GROUP BY understanding_level
    """
    result = execute_query(query, (student_id,), fetch=True)
    
    progress = {'fully': 0, 'questions': 0, 'needWork': 0}
    
    if result:
        for row in result:
            level = row['understanding_level']
            count = row['count']
            
            if level == '–¢–µ–º–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é':
                progress['fully'] = count
            elif level == '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ':
                progress['questions'] = count
            elif level == '–¢–µ–º—É –Ω—É–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å':
                progress['needWork'] = count
    
    return progress

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['SECRET_KEY'] = 'your-secret-key-here'
app.permanent_session_lifetime = timedelta(days=30)

from flask import Flask, render_template, request, redirect, url_for, session

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞"""
    return render_template('index.html')

@app.route('/student-auth', methods=['GET', 'POST'])
def student_auth():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞"""
    if request.method == 'POST':
        login = request.form.get('login')
        password = request.form.get('password')
        
        user = authenticate_user(login, password)
        if user and user['role'] == 'student':
            session['user_id'] = user['id']
            session['login'] = user['login']
            session['role'] = user['role']
            session['student_id'] = user['student_id']
            return redirect(url_for('student_dashboard'))
        else:
            return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', auth_type='student')
    
    return render_template('login.html', auth_type='student')

@app.route('/parent-auth', methods=['GET', 'POST'])
def parent_auth():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    if request.method == 'POST':
        login = request.form.get('login')
        password = request.form.get('password')
        
        user = authenticate_user(login, password)
        if user and user['role'] == 'parent':
            session['user_id'] = user['id']
            session['login'] = user['login']
            session['role'] = user['role']
            session['student_id'] = user['student_id']
            return redirect(url_for('parent_dashboard'))
        else:
            return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', auth_type='parent')
    
    return render_template('login.html', auth_type='parent')

@app.route('/admin-auth', methods=['GET', 'POST'])
def admin_auth():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"""
    if request.method == 'POST':
        login = request.form.get('login')
        password = request.form.get('password')
        
        user = authenticate_user(login, password)
        if user and user['role'] == 'admin':
            session['user_id'] = user['id']
            session['login'] = user['login']
            session['role'] = user['role']
            session['admin_logged_in'] = True  # –î–ª—è –ö–∞–ª–µ–Ω–¥–∞—à–∏
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ö–∞–ª–µ–Ω–¥–∞—à—É
            admin_token = secrets.token_urlsafe(32)
            session['admin_token'] = admin_token
            session.permanent = True
            print(f"üîç –°–û–ó–î–ê–ù –¢–û–ö–ï–ù: {admin_token}")  # ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            print(f"üîç –°–ï–°–°–ò–Ø –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –¢–û–ö–ï–ù–ê: {dict(session)}")  # ‚Üê –ò —ç—Ç—É
            return redirect(f"http://127.0.0.1:5000?token={admin_token}")
        else:
            return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', auth_type='admin')
    
    return render_template('login.html', auth_type='admin')

@app.route('/verify-admin-token/<token>')
def verify_admin_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print(f"üîç –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê: –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω = {token}")  # ‚Üê –î–æ–±–∞–≤—å
    print(f"üîç –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {dict(session)}")  # ‚Üê –î–æ–±–∞–≤—å
    
    if session.get('admin_token') == token and session.get('role') == 'admin':
        print("‚úÖ –¢–û–ö–ï–ù –í–ê–õ–ò–î–ù–´–ô")  # ‚Üê –î–æ–±–∞–≤—å
        return {'valid': True, 'admin_id': session.get('user_id'), 'login': session.get('login')}
    
    print("‚ùå –¢–û–ö–ï–ù –ù–ï –í–ê–õ–ò–î–ù–´–ô")  # ‚Üê –î–æ–±–∞–≤—å
    print(f"üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {session.get('admin_token')}")  # ‚Üê –î–æ–±–∞–≤—å
    print(f"üîç –†–æ–ª—å: {session.get('role')}")  # ‚Üê –î–æ–±–∞–≤—å
    return {'valid': False}

@app.route('/about-teacher')
def about_teacher():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ"""
    return render_template('about.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if request.method == 'POST':
        login_input = request.form.get('login')
        password_input = request.form.get('password')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        user = check_user_login(login_input, password_input)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        lesson_reports = get_student_lesson_reports(student_id)
        homework_data = get_student_homework(student_id)
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
            session['user_id'] = user['id']
            session['student_id'] = user['student_id']
            session['role'] = user['role']
            session['full_name'] = user['full_name']
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user['role'] == 'student':
                return redirect(url_for('student_dashboard'))
            elif user['role'] == 'parent':
                return redirect(url_for('parent_dashboard'))
            else:
                return redirect(url_for('admin_dashboard'))
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
            return render_template('login.html', error='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    return render_template('login.html')

@app.route('/student')
def student_dashboard():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É—á–µ–Ω–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if 'user_id' not in session or session.get('role') != 'student':
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
    student_id = session.get('student_id')
    student = get_student_info(student_id)
    
    if not student:
        return redirect(url_for('login'))
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –õ–ö–£
    balance_data = get_student_balance(student_id)
    lessons_data = get_student_lessons_count(student_id)
    schedule_data = get_student_schedule_data(student_id)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
    exam_results = get_student_exam_results(student_id)
    topic_progress = get_student_topic_progress(student_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∞—Å —É—Ä–æ–∫–æ–≤
    lesson_price = student.get('lesson_price', 0)
    current_balance = balance_data.get('balance', 0)
    lessons_in_stock = int(current_balance / lesson_price) if lesson_price > 0 else 0

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    lesson_reports = get_student_lesson_reports(student_id)
    homework_data = get_student_homework(student_id)
        
    student_data = {
        'name': student['name'],
        'class': student.get('class_level', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'lesson_price': lesson_price,
        'balance': current_balance,
        'lessons_in_stock': lessons_in_stock,
        'completed_lessons': lessons_data.get('completed_lessons', 0),
        'cancelled_lessons': lessons_data.get('cancelled_lessons', 0), 
        'planned_lessons': lessons_data.get('planned_lessons', 0),
        'schedule': schedule_data,
        'exam_results': exam_results,
        'topic_progress': get_student_topic_progress(student_id),
        'lesson_reports': lesson_reports,  # –ù–û–í–û–ï
        'homework_data': homework_data     # –ù–û–í–û–ï
    }
    
    # –û–¢–õ–ê–î–ö–ê - —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
    print("=== –î–ê–ù–ù–´–ï –î–õ–Ø –õ–ö–£ ===")
    print(f"–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞: {student_data}")
    print("======================")
    

    return render_template('student/dashboard.html', student=student_data)

def get_parent_info(parent_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª–µ –ø–æ ID"""
    query = "SELECT * FROM students WHERE id = %s"
    result = execute_query(query, (parent_id,), fetch_one=True)
    return dict(result) if result else None

def get_parent_children(parent_name):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ parent_name"""
    query = "SELECT * FROM students WHERE parent_name = %s ORDER BY name"
    result = execute_query(query, (parent_name,), fetch=True)
    return [dict(row) for row in result] if result else []

@app.route('/parent')
def parent_dashboard():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if 'user_id' not in session or session.get('role') != 'parent':
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    parent_id = session.get('student_id')  # –í –ë–î —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å parent_id
    parent_info = get_parent_info(parent_id)
    
    if not parent_info:
        return redirect(url_for('login'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    children = get_parent_children(parent_info['parent_name'])
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    children_data = []
    for child in children:
        child_balance = get_student_balance(child['id'])
        child_lessons = get_student_lessons_count(child['id'])
        child_schedule = get_student_schedule_data(child['id'])
        child_exam_results = get_student_exam_results(child['id'])
        child_topic_progress = get_student_topic_progress(child['id'])
        child_lesson_reports = get_student_lesson_reports(child['id'])
        child_homework = get_student_homework(child['id'])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∞—Å —É—Ä–æ–∫–æ–≤
        lesson_price = child.get('lesson_price', 0)
        current_balance = child_balance.get('balance', 0)
        lessons_in_stock = int(current_balance / lesson_price) if lesson_price > 0 else 0
        
        children_data.append({
            'id': child['id'],
            'name': child['name'],
            'class': child.get('class_level', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'lesson_price': lesson_price,
            'balance': current_balance,
            'lessons_in_stock': lessons_in_stock,
            'completed_lessons': child_lessons.get('completed_lessons', 0),
            'cancelled_lessons': child_lessons.get('cancelled_lessons', 0),
            'planned_lessons': child_lessons.get('planned_lessons', 0),
            'schedule': child_schedule,
            'exam_results': child_exam_results,
            'topic_progress': child_topic_progress,
            'lesson_reports': child_lesson_reports,
            'homework_data': child_homework
        })
    
    parent_data = {
        'parent_name': parent_info.get('parent_name', '–†–æ–¥–∏—Ç–µ–ª—å'),
        'children': children_data
    }
    
    return render_template('parent/dashboard.html', parent=parent_data)

@app.route('/admin-student/<int:student_id>')
def admin_student_dashboard(student_id):
    """–ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –õ–ö–£ —É—á–µ–Ω–∏–∫–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
    admin_token = request.args.get('token')
    if not admin_token:
        return redirect(url_for('index'))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ (—Ç–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –≤ parent_dashboard –¥–ª—è –¥–µ—Ç–µ–π)
    student = get_student_info(student_id)
    if not student:
        return "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    student_balance = get_student_balance(student_id)
    lessons_data = get_student_lessons_count(student_id)
    schedule_data = get_student_schedule_data(student_id)
    exam_results = get_student_exam_results(student_id)
    topic_progress = get_student_topic_progress(student_id)
    lesson_reports = get_student_lesson_reports(student_id)
    homework_data = get_student_homework(student_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∞—Å —É—Ä–æ–∫–æ–≤
    lesson_price = student.get('lesson_price', 0)
    current_balance = student_balance.get('balance', 0)
    lessons_in_stock = int(current_balance / lesson_price) if lesson_price > 0 else 0
    
    student_data = {
        'name': student['name'],
        'class': student.get('class_level', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'lesson_price': lesson_price,
        'balance': current_balance,
        'lessons_in_stock': lessons_in_stock,
        'completed_lessons': lessons_data.get('completed_lessons', 0),
        'cancelled_lessons': lessons_data.get('cancelled_lessons', 0),
        'planned_lessons': lessons_data.get('planned_lessons', 0),
        'schedule': schedule_data,
        'exam_results': exam_results,
        'topic_progress': topic_progress,
        'lesson_reports': lesson_reports,
        'homework_data': homework_data
    }
    
    return render_template('student/dashboard.html', student=student_data)

@app.route('/admin-parent/<parent_name>')
def admin_parent_dashboard(parent_name):
    """–ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –õ–ö–† —Ä–æ–¥–∏—Ç–µ–ª—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
    admin_token = request.args.get('token')
    if not admin_token:
        return redirect(url_for('index'))

    import urllib.parse
    parent_name = urllib.parse.unquote(parent_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    children = get_parent_children(parent_name)
    
    if not children:
        return "–î–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 404
    
    # –¢–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –≤ parent_dashboard()
    children_data = []
    for child in children:
        child_balance = get_student_balance(child['id'])
        child_lessons = get_student_lessons_count(child['id'])
        child_schedule = get_student_schedule_data(child['id'])
        child_exam_results = get_student_exam_results(child['id'])
        child_topic_progress = get_student_topic_progress(child['id'])
        child_lesson_reports = get_student_lesson_reports(child['id'])
        child_homework = get_student_homework(child['id'])
        
        lesson_price = child.get('lesson_price', 0)
        current_balance = child_balance.get('balance', 0)
        lessons_in_stock = int(current_balance / lesson_price) if lesson_price > 0 else 0
        
        children_data.append({
            'id': child['id'],
            'name': child['name'],
            'class': child.get('class_level', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'lesson_price': lesson_price,
            'balance': current_balance,
            'lessons_in_stock': lessons_in_stock,
            'completed_lessons': child_lessons.get('completed_lessons', 0),
            'cancelled_lessons': child_lessons.get('cancelled_lessons', 0),
            'planned_lessons': child_lessons.get('planned_lessons', 0),
            'schedule': child_schedule,
            'exam_results': child_exam_results,
            'topic_progress': child_topic_progress,
            'lesson_reports': child_lesson_reports,
            'homework_data': child_homework
        })
    
    parent_data = {
        'parent_name': parent_name,
        'children': children_data
    }
    
    return render_template('parent/dashboard.html', parent=parent_data)

@app.route('/admin')
def admin_dashboard():
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return render_template('admin/main.html')

@app.route('/about')
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ"""
    return render_template('about.html')

@app.route('/game')
def game():
    """–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞-–ª–∞–±–∏—Ä–∏–Ω—Ç"""
    return render_template('game/game.html')

@app.route('/proxy-schedule/<int:year>/<int:week>')  
def proxy_schedule(year, week):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
    try:
        from flask import request
        import re
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        if 'user_id' not in session and 'admin_logged_in' not in session:
            # –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            from flask import request
            referer = request.headers.get('Referer', '')
            if not referer or ('student' not in referer and 'admin' not in referer):
                return {"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}, 401

        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ 
        student_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
        referer = request.headers.get('Referer', '')
        admin_match = re.search(r'/admin-student/(\d+)', referer)

        if admin_match:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            student_id = int(admin_match.group(1))
            print(f"–ê–¥–º–∏–Ω—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—á–µ–Ω–∏–∫–∞: {student_id}")
        else:
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            student_id = session.get('student_id')
            print(f"–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, student_id: {student_id}")

        if not student_id:
            return {"error": "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404
            
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        from datetime import datetime, timedelta
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        jan_1 = datetime(year, 1, 1)
        jan_1_weekday = jan_1.weekday()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏
        days_to_monday = -jan_1_weekday if jan_1_weekday != 0 else 0
        first_monday = jan_1 + timedelta(days=days_to_monday)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω—É–∂–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        target_monday = first_monday + timedelta(weeks=week-1)
        target_sunday = target_monday + timedelta(days=6)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
        query = """
            SELECT date, time, subject, status, lesson_duration
            FROM lessons
            WHERE student_id = %s
            AND date BETWEEN %s AND %s
            ORDER BY date, time
        """
        result = execute_query(query, (student_id, target_monday.date(), target_sunday.date()), fetch=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–¥–µ–ª–∏
        week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        week_data = []
        
        today = datetime.now().date()
        
        for i, day_name in enumerate(week_days):
            current_date = target_monday.date() + timedelta(days=i)
            day_lessons = []
            
            if result:
                for lesson in result:
                    if lesson['date'] == current_date:
                        day_lessons.append({
                            'time': lesson['time'].strftime('%H:%M'),
                            'subject': lesson['subject'],
                            'status': lesson['status']
                        })
            
            week_data.append({
                'day_name': day_name,
                'day_number': current_date.day,
                'date': current_date.strftime('%d.%m'),
                'full_date': current_date.strftime('%Y-%m-%d'),
                'is_today': current_date == today,
                'lessons': day_lessons
            })
        
        return {
            'week_data': week_data,
            'week_info': {
                'title': f'–ù–µ–¥–µ–ª—è {week}, {year}',
                'period': f'—Å {target_monday.strftime("%d.%m")} –ø–æ {target_sunday.strftime("%d.%m")}'
            }
        }
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ proxy_schedule: {e}")
        return {"error": str(e)}, 500

@app.errorhandler(404)
def page_not_found(e):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 404"""
    return render_template('login.html'), 404

@app.route("/test-db")
def test_db():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        students = get_all_students()
        return f"<h2>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h2><p>–ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}</p><ul>{''.join([f'<li>{s["name"]}</li>' for s in students[:5]])}</ul>"
    except Exception as e:
        return f"<h2>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h2><p>{str(e)}</p>"

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.clear()  # –û—á–∏—â–∞–µ–º –≤—Å—é —Å–µ—Å—Å–∏—é
    return redirect(url_for('index'))  # –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥–∞

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.run(debug=True, host='127.0.0.1', port=8080)