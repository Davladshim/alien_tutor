from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import requests
import psycopg2
import psycopg2.extras
from datetime import datetime, timedelta
import calendar
import pytz
import uuid
import json

app = Flask(__name__)
app.secret_key = 'darya_shim_kalendasha_key'
app.permanent_session_lifetime = timedelta(days=30)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

DATABASE_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT')),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD')
}

# –°–ª–æ–≤–∞—Ä—å —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
TIMEZONE_MAPPING = {
    '–ö–õ–î': 'Europe/Kaliningrad',
    '–ú–°–ö': 'Europe/Moscow',
    '–ú–°–ö+1': 'Europe/Samara',
    '–ï–ö–ë': 'Asia/Yekaterinburg',
    '–û–ú–°': 'Asia/Omsk',
    '–ù–°–ö': 'Asia/Novosibirsk',
    '–ò–†–ö': 'Asia/Irkutsk',
    '–Ø–ö–¢': 'Asia/Yakutsk',
    '–í–õ–î': 'Asia/Vladivostok',
    '–ú–ì–î': 'Asia/Magadan',
    '–ö–ê–ú': 'Asia/Kamchatka',
    '–ö–†–î': 'Europe/Moscow',
    '–ö–ó–ù': 'Europe/Moscow',
    'UTC+0': 'UTC',
    'UTC+1': 'Etc/GMT-1',
    'UTC+2': 'Etc/GMT-2',
    'UTC+3': 'Etc/GMT-3',
    'UTC+4': 'Etc/GMT-4',
    'UTC+5': 'Etc/GMT-5',
    'UTC+6': 'Etc/GMT-6',
    'UTC+7': 'Etc/GMT-7',
    'UTC+8': 'Etc/GMT-8',
    'UTC+9': 'Etc/GMT-9',
    'UTC+10': 'Etc/GMT-10',
    'UTC+11': 'Etc/GMT-11',
    'UTC+12': 'Etc/GMT-12'
}

# ============================================================================
# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•
# ============================================================================

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DATABASE_CONFIG)
        return conn
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def execute_query(query, params=None, fetch=False, fetch_one=False):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å"""
    conn = get_db_connection()
    if not conn:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return None
    
    try:
        with conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
            print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            cur.execute(query, params)
            
            if fetch_one:
                result = cur.fetchone()
            elif fetch:
                result = cur.fetchall()
            else:
                result = cur.rowcount  # ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å!
                print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {result}")
                
            conn.commit()
            return result
    except psycopg2.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ß–ï–ù–ò–ö–û–í
# ============================================================================

def load_students():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    query = """
        SELECT id, name, class_level as class, city, timezone, parent_name, 
               contact, notes, lesson_price, created_at
        FROM students 
        ORDER BY name
    """
    result = execute_query(query, fetch=True)
    return [dict(row) for row in result] if result else []

def verify_admin_login(login, password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞"""
    query = """
        SELECT id, login, role, full_name 
        FROM user_accounts 
        WHERE login = %s AND password = %s AND role = 'admin'
    """
    result = execute_query(query, (login, password), fetch_one=True)
    return dict(result) if result else None

def require_admin_login():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    def decorator(f):
        def wrapper(*args, **kwargs):
            if not session.get('admin_logged_in'):
                return redirect(url_for('admin_login'))
            return f(*args, **kwargs)
        wrapper.__name__ = f.__name__
        return wrapper
    return decorator

def save_student(student_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    from datetime import datetime
    
    query = """
        INSERT INTO students (name, class_level, city, timezone, parent_name, contact, notes, lesson_price, created_at)
        VALUES (%(name)s, %(class)s, %(city)s, %(timezone)s, %(parent_name)s, %(contact)s, %(notes)s, %(lesson_price)s, NOW())
        RETURNING id
    """
    result = execute_query(query, student_data, fetch_one=True)
    
    if result:
        student_id = result['id']
        registration_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        login, password = create_user_account(student_id, student_data['name'], registration_time)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—á–µ–Ω–∏–∫: {student_data['name']}")
        print(f"üìù –õ–æ–≥–∏–Ω: {login}")
        print(f"üîë –ü–∞—Ä–æ–ª—å: {password}")
        
        return student_id
    
    return None

def update_student(student_id, student_data):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞"""
    query = """
        UPDATE students 
        SET name=%(name)s, class_level=%(class)s, city=%(city)s, timezone=%(timezone)s, 
            parent_name=%(parent_name)s, contact=%(contact)s, notes=%(notes)s, lesson_price=%(lesson_price)s
        WHERE id=%(student_id)s
    """
    student_data['student_id'] = student_id
    execute_query(query, student_data)

def delete_student_completely(student_id):
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —Å ID: {student_id}")
    
    # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - —Å–Ω–∞—á–∞–ª–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    queries = [
        # 1. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è (–æ–Ω–∏ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ lessons)
        "DELETE FROM lesson_reports WHERE student_id = %s",
        "DELETE FROM homework_assignments WHERE student_id = %s", 
        "DELETE FROM exam_results WHERE student_id = %s",
        "DELETE FROM topic_progress WHERE student_id = %s",
        
        # 2. –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —É—Ä–æ–∫–∏ –∏ —à–∞–±–ª–æ–Ω—ã
        "DELETE FROM lessons WHERE student_id = %s",
        "DELETE FROM lesson_templates WHERE student_id = %s",
        
        # 3. –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        "DELETE FROM payments WHERE student_id = %s",
        
        # 4. –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        "DELETE FROM user_accounts WHERE student_id = %s",
        
        # 5. –ò –Ω–∞–∫–æ–Ω–µ—Ü —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        "DELETE FROM students WHERE id = %s"
    ]
    
    try:
        for i, query in enumerate(queries, 1):
            print(f"üóëÔ∏è –®–∞–≥ {i}: {query}")
            result = execute_query(query, (student_id,))
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result}")
        
        print(f"üéâ –£—á–µ–Ω–∏–∫ {student_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ {student_id}: {e}")
        return False

def get_student_by_name(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    query = "SELECT * FROM students WHERE name = %s"
    result = execute_query(query, (student_name,), fetch_one=True)
    return dict(result) if result else None

def get_student_by_id(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø–æ ID"""
    query = "SELECT * FROM students WHERE id = %s"
    result = execute_query(query, (student_id,), fetch_one=True)
    return dict(result) if result else None

def generate_credentials(student_name, registration_time):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    # –õ–æ–≥–∏–Ω: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∏–º–µ–Ω–∏
    login = student_name.replace(" ", "")
    
    # –ü–∞—Ä–æ–ª—å: –∏–º—è + –¥–∞—Ç–∞-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥–º–º–≥–≥—á—á–º–º
    password = login + registration_time.strftime("%d%m%y%H%M")
    
    return login, password

def create_user_account(student_id, student_name, registration_time):
    """–°–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    login, password = generate_credentials(student_name, registration_time)
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —É—á–µ–Ω–∏–∫–∞
    student_query = """
        INSERT INTO user_accounts (login, password, role, student_id, full_name, created_at)
        VALUES (%s, %s, %s, %s, %s, NOW())
    """
    execute_query(student_query, (login, password, 'student', student_id, student_name))
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å)
    student = get_student_by_id(student_id)
    if student and student.get('parent_name'):
        parent_name = student['parent_name']
        parent_login = parent_name.replace(" ", "")
        parent_password = parent_login + registration_time.strftime("%d%m%y%H%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        check_parent_query = "SELECT id FROM user_accounts WHERE login = %s"
        existing_parent = execute_query(check_parent_query, (parent_login,), fetch_one=True)
        
        if not existing_parent:
            parent_query = """
                INSERT INTO user_accounts (login, password, role, student_id, full_name, created_at)
                VALUES (%s, %s, %s, %s, %s, NOW())
            """
            execute_query(parent_query, (parent_login, parent_password, 'parent', student_id, parent_name))
    
    return login, password

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–†–û–ö–û–í
# ============================================================================

def load_slots():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏"""
    query = """
        SELECT l.*, s.name as student_name
        FROM lessons l
        LEFT JOIN students s ON l.student_id = s.id
        ORDER BY l.date, l.time
    """
    result = execute_query(query, fetch=True)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    slots = []
    for row in result:
        slot = {
            'id': row['id'],
            'student': row['student_name'],
            'subject': row['subject'],
            'time': str(row['time']),
            'status': row['status'],
            'lesson_type': row['lesson_type'],
            'lesson_duration': row['lesson_duration'],
            'from_template': row['from_template'],
            'is_paid': row['is_paid']
        }
        
        if row['date']:
            slot['date'] = row['date'].strftime('%Y-%m-%d')
        if row['day_of_week']:
            slot['day'] = row['day_of_week']
            
        slots.append(slot)
    
    return slots

def create_lesson(lesson_data):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫"""
    student = get_student_by_name(lesson_data.get('student'))
    if not student:
        return None
        
    query = """
        INSERT INTO lessons (id, student_id, date, time, day_of_week, subject, status, 
                        lesson_type, lesson_duration, from_template, is_paid, 
                        original_date, original_time, is_moved, moved_reason, created_at)
        VALUES (%(id)s, %(student_id)s, %(date)s, %(time)s, %(day_of_week)s, %(subject)s, %(status)s,
                %(lesson_type)s, %(lesson_duration)s, %(from_template)s, %(is_paid)s,
                %(original_date)s, %(original_time)s, %(is_moved)s, %(moved_reason)s, NOW())
        RETURNING id
    """
    
    lesson_params = {
        'id': lesson_data.get('id', generate_slot_id()),
        'student_id': student['id'],
        'date': lesson_data.get('date'),
        'time': lesson_data.get('time'),
        'day_of_week': lesson_data.get('day'),
        'subject': lesson_data.get('subject'),
        'status': lesson_data.get('status', 'scheduled'),
        'lesson_type': lesson_data.get('lesson_type', 'regular'),
        'lesson_duration': lesson_data.get('lesson_duration', 60),
        'from_template': lesson_data.get('from_template', False),
        'is_paid': lesson_data.get('is_paid', False),
        # –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:
        'original_date': lesson_data.get('original_date', lesson_data.get('date')),
        'original_time': lesson_data.get('original_time', lesson_data.get('time')),
        'is_moved': lesson_data.get('is_moved', False),
        'moved_reason': lesson_data.get('moved_reason', None)
    }
    
    result = execute_query(query, lesson_params, fetch_one=True)
    return result['id'] if result else None

def update_lesson(lesson_id, lesson_data):
    """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"""
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ {lesson_id}")
    print(f"üîÑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {lesson_data}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
    current_lesson = get_lesson_by_id(lesson_id)
    if not current_lesson:
        print(f"‚ùå –£—Ä–æ–∫ {lesson_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üîÑ –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {current_lesson}")
    
    student = get_student_by_name(lesson_data.get('student'))
    if not student:
        print(f"‚ùå –£—á–µ–Ω–∏–∫ {lesson_data.get('student')} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —É—Ä–æ–∫ –≤ –±—É–¥—É—â–µ–µ
    new_date = lesson_data.get('date')
    new_time = lesson_data.get('time')
    current_status = current_lesson.get('status')
    
    print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å: —Å—Ç–∞—Ç—É—Å={current_status}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞={new_date}, –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è={new_time}")
    
    # –ï—Å–ª–∏ —É—Ä–æ–∫ –±—ã–ª completed –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–µ - –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É
    if current_status == 'completed' and new_date and new_time:
        try:
            from datetime import datetime, date, time
            
            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            new_date_obj = datetime.strptime(new_date, '%Y-%m-%d').date()
            new_time_obj = datetime.strptime(new_time, '%H:%M').time()
            new_datetime = datetime.combine(new_date_obj, new_time_obj)
            
            print(f"üîÑ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞: {new_datetime}")
            print(f"üîÑ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}")
            
            # –ï—Å–ª–∏ —É—Ä–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–µ
            if new_datetime > datetime.now():
                print(f"üîÑ –£—Ä–æ–∫ {lesson_id} –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–µ - –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–ª–∞—Ç—É - –Ω–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –∑–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
                refund_query = """
                    SELECT id, amount FROM payments 
                    WHERE lesson_id = %s AND payment_type = 'expense'
                    ORDER BY created_at DESC LIMIT 1
                """
                payment_result = execute_query(refund_query, (lesson_id,), fetch_one=True)
                
                print(f"üîÑ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment_result}")
                
                if payment_result:
                    # –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
                    refund_amount = abs(payment_result['amount'])  # –î–µ–ª–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
                    refund_query = """
                        INSERT INTO payments (id, student_id, amount, payment_type, description, lesson_id, payment_date, created_at)
                        VALUES (%s, %s, %s, %s, %s, %s, NOW(), NOW())
                    """
                    refund_id = generate_slot_id()
                    execute_query(refund_query, (
                        refund_id, student['id'], refund_amount, 'refund', 
                        f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –ø–µ—Ä–µ–Ω–æ—Å —É—Ä–æ–∫–∞ {lesson_id}", lesson_id
                    ))
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç {refund_amount} —Ä—É–±. –∑–∞ —É—Ä–æ–∫ {lesson_id}")
                
                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ scheduled
                lesson_data['status'] = 'scheduled'
                print(f"üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ scheduled")
            else:
                print(f"üîÑ –£—Ä–æ–∫ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–µ, –æ–ø–ª–∞—Ç—É –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print(f"üîÑ –£—Å–ª–æ–≤–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: —Å—Ç–∞—Ç—É—Å={current_status}, –¥–∞—Ç–∞={new_date}, –≤—Ä–µ–º—è={new_time}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
    query = """
        UPDATE lessons 
        SET student_id=%(student_id)s, date=%(date)s, time=%(time)s, day_of_week=%(day_of_week)s,
            subject=%(subject)s, status=%(status)s, lesson_duration=%(lesson_duration)s
        WHERE id=%(lesson_id)s
    """
    
    lesson_params = {
        'lesson_id': lesson_id,
        'student_id': student['id'],
        'date': lesson_data.get('date'),
        'time': lesson_data.get('time'),
        'day_of_week': lesson_data.get('day'),
        'subject': lesson_data.get('subject'),
        'status': lesson_data.get('status', 'scheduled'),
        'lesson_duration': lesson_data.get('lesson_duration', 60)
    }
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {lesson_params}")
    
    execute_query(query, lesson_params)
    print(f"‚úÖ –£—Ä–æ–∫ {lesson_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def update_lesson_status(lesson_id, new_status):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞"""
    query = "UPDATE lessons SET status = %s WHERE id = %s"
    execute_query(query, (new_status, lesson_id))
    return True

def delete_lesson(lesson_id):
    """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"""
    print(f"üéØ –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ —Å ID: {lesson_id}")
    query = "DELETE FROM lessons WHERE id = %s"
    result = execute_query(query, (lesson_id,))
    
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç execute_query: {result}")
    success = result is not None and result > 0
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è: {success}")
    
    return success
    
    try:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM lessons WHERE id = %s", (lesson_id,))
            deleted_count = cur.rowcount  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            conn.commit()
            return deleted_count > 0  # True –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    except psycopg2.Error as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def get_lesson_by_id(lesson_id):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ –ø–æ ID"""
    query = """
        SELECT l.*, s.name as student_name
        FROM lessons l
        LEFT JOIN students s ON l.student_id = s.id
        WHERE l.id = %s
    """
    result = execute_query(query, (lesson_id,), fetch_one=True)
    
    if result:
        lesson = {
            'id': result['id'],
            'student': result['student_name'],
            'subject': result['subject'],
            'time': str(result['time']),
            'status': result['status'],
            'lesson_type': result['lesson_type'],
            'lesson_duration': result['lesson_duration'],
            'from_template': result['from_template'],
            'is_paid': result['is_paid']
        }
        
        if result['date']:
            lesson['date'] = result['date'].strftime('%Y-%m-%d')
        if result['day_of_week']:
            lesson['day'] = result['day_of_week']
            
        return lesson
    
    return None

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def generate_slot_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
    return str(uuid.uuid4())[:8]

def convert_time_for_user(time_str, from_timezone='–ú–°–ö', to_timezone='–ú–°–ö'):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
        today = datetime.now().date()
        dt = datetime.combine(today, time_obj)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        from_tz = pytz.timezone(TIMEZONE_MAPPING.get(from_timezone, 'Europe/Moscow'))
        to_tz = pytz.timezone(TIMEZONE_MAPPING.get(to_timezone, 'Europe/Moscow'))
        
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—è—Å–∞
        dt_localized = from_tz.localize(dt)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –ø–æ—è—Å
        dt_converted = dt_localized.astimezone(to_tz)
        
        return dt_converted.strftime('%H:%M')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return time_str
# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –®–ê–ë–õ–û–ù–ê –ù–ï–î–ï–õ–ò
# ============================================================================

def load_template_week():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏"""
    query = """
        SELECT lt.*, s.name as student_name
        FROM lesson_templates lt
        LEFT JOIN students s ON lt.student_id = s.id
        ORDER BY 
            CASE lt.day_of_week
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                WHEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' THEN 7
            END, lt.time
    """
    result = execute_query(query, fetch=True)
    
    templates = []
    for row in result:
        template = {
            'day': row['day_of_week'],
            'time': str(row['time']),
            'student': row['student_name'],
            'subject': row['subject'],
            'lesson_type': row['lesson_type'],
            'lesson_duration': row['lesson_duration']
        }
        
        if row['start_date']:
            template['start_date'] = row['start_date'].strftime('%Y-%m-%d')
        else:
            template['start_date'] = ""
            
        if row['end_date']:
            template['end_date'] = row['end_date'].strftime('%Y-%m-%d')
        else:
            template['end_date'] = ""
            
        templates.append(template)
    
    return templates

def add_template_lesson(lesson_data):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏"""
    student = get_student_by_name(lesson_data.get("student"))
    if not student:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    check_query = """
        SELECT id FROM lesson_templates 
        WHERE day_of_week = %s AND time = %s AND student_id = %s
    """
    existing = execute_query(check_query, (lesson_data.get("day"), lesson_data.get("time"), student['id']), fetch_one=True)
    
    if existing:
        return False  # –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω
    
    query = """
        INSERT INTO lesson_templates (day_of_week, time, student_id, subject, start_date, end_date,
                                    lesson_type, lesson_duration, created_at)
        VALUES (%(day)s, %(time)s, %(student_id)s, %(subject)s, %(start_date)s, %(end_date)s,
                %(lesson_type)s, %(lesson_duration)s, NOW())
    """
    
    template_params = {
        'day': lesson_data.get("day"),
        'time': lesson_data.get("time"),
        'student_id': student['id'],
        'subject': lesson_data.get("subject"),
        'start_date': lesson_data.get("start_date") if lesson_data.get("start_date") else None,
        'end_date': lesson_data.get("end_date") if lesson_data.get("end_date") else None,
        'lesson_type': lesson_data.get("lesson_type", "regular"),
        'lesson_duration': lesson_data.get("lesson_duration", 60)
    }
    
    execute_query(query, template_params)
    return True

def update_template_lesson(index, lesson_data):
    """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ–¥–µ–ª–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID –ø–æ –∏–Ω–¥–µ–∫—Å—É
    templates = load_template_week()
    if index < 0 or index >= len(templates):
        return False
        
    # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    query_get_id = """
        SELECT id FROM lesson_templates 
        ORDER BY 
            CASE day_of_week
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                WHEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' THEN 7
            END, time
        LIMIT 1 OFFSET %s
    """
    result = execute_query(query_get_id, (index,), fetch_one=True)
    if not result:
        return False
        
    template_id = result['id']
    student = get_student_by_name(lesson_data.get("student"))
    if not student:
        return False
    
    query = """
        UPDATE lesson_templates 
        SET day_of_week=%(day)s, time=%(time)s, student_id=%(student_id)s, subject=%(subject)s,
            start_date=%(start_date)s, end_date=%(end_date)s, lesson_type=%(lesson_type)s,
            lesson_duration=%(lesson_duration)s
        WHERE id=%(template_id)s
    """
    
    template_params = {
        'template_id': template_id,
        'day': lesson_data.get("day"),
        'time': lesson_data.get("time"),
        'student_id': student['id'],
        'subject': lesson_data.get("subject"),
        'start_date': lesson_data.get("start_date") if lesson_data.get("start_date") else None,
        'end_date': lesson_data.get("end_date") if lesson_data.get("end_date") else None,
        'lesson_type': lesson_data.get("lesson_type", "regular"),
        'lesson_duration': lesson_data.get("lesson_duration", 60)
    }
    
    execute_query(query, template_params)
    return True

def delete_template_lesson(index):
    """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏"""
    # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    query_get_id = """
        SELECT id FROM lesson_templates 
        ORDER BY 
            CASE day_of_week
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                WHEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' THEN 7
            END, time
        LIMIT 1 OFFSET %s
    """
    result = execute_query(query_get_id, (index,), fetch_one=True)
    if not result:
        return False
        
    template_id = result['id']
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    delete_related_query = """
        DELETE FROM lessons 
        WHERE from_template = true 
        AND student_id = (SELECT student_id FROM lesson_templates WHERE id = %s)
        AND day_of_week = (SELECT day_of_week FROM lesson_templates WHERE id = %s)
        AND time = (SELECT time FROM lesson_templates WHERE id = %s)
        AND subject = (SELECT subject FROM lesson_templates WHERE id = %s)
    """
    execute_query(delete_related_query, (template_id, template_id, template_id, template_id))
    
    # –£–¥–∞–ª—è–µ–º —Å–∞–º —à–∞–±–ª–æ–Ω
    query = "DELETE FROM lesson_templates WHERE id = %s"
    execute_query(query, (template_id,))
    return True

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê
# ============================================================================

def apply_template_to_schedule_with_periods():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
    template = load_template_week()
    added_count = 0
    today = datetime.now().date()
    
    for template_lesson in template:
        start_date = template_lesson.get('start_date')
        end_date = template_lesson.get('end_date')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        if not template_lesson.get('day') or not template_lesson.get('time') or not template_lesson.get('student'):
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —É—Ä–æ–∫–∞
        if start_date:
            try:
                start_date_obj = datetime.strptime(start_date, '%Y-%m-%d').date()
            except:
                start_date_obj = today
        else:
            start_date_obj = today
        
        if end_date:
            try:
                end_date_obj = datetime.strptime(end_date, '%Y-%m-%d').date()
            except:
                end_date_obj = today + timedelta(days=365)
        else:
            end_date_obj = today + timedelta(days=365)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        day_name = template_lesson['day']
        target_weekday = get_weekday_num(day_name)
        
        current_date = start_date_obj
        while current_date <= end_date_obj:
            if current_date.weekday() == target_weekday:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —É—Ä–æ–∫–∞ —Å —ç—Ç–∏–º —É—á–µ–Ω–∏–∫–æ–º –Ω–∞ —ç—Ç—É "–∏—Å—Ö–æ–¥–Ω—É—é" –¥–∞—Ç—É/–≤—Ä–µ–º—è
                check_query = """
                    SELECT id FROM lessons 
                    WHERE student_id = (SELECT id FROM students WHERE name = %s)
                    AND original_date = %s 
                    AND original_time = %s
                """

                print(f"üîç –ü–†–û–í–ï–†–Ø–ï–ú: {template_lesson['student']} –Ω–∞ {current_date} –≤ {template_lesson['time']}")
                existing = execute_query(check_query, (template_lesson['student'], current_date, template_lesson['time']), fetch_one=True)
                print(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò: {existing}")

                if not existing:
                    print(f"‚úÖ –°–û–ó–î–ê–ï–ú –£–†–û–ö: {template_lesson['student']} –Ω–∞ {current_date} –≤ {template_lesson['time']}")
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                    lesson_data = {
                        'id': generate_slot_id(),
                        'date': current_date.strftime('%Y-%m-%d'),
                        'time': template_lesson['time'],
                        'student': template_lesson['student'],
                        'subject': template_lesson['subject'],
                        'status': 'scheduled',
                        'from_template': True,
                        'lesson_type': template_lesson.get('lesson_type', 'regular'),
                        'lesson_duration': template_lesson.get('lesson_duration', 60),
                        'original_date': current_date.strftime('%Y-%m-%d'),
                        'original_time': template_lesson['time'],
                        'is_moved': False,
                        'moved_reason': None
                    }
                    
                    print(f"üîç –î–ê–ù–ù–´–ï –£–†–û–ö–ê: {lesson_data}")
                    
                    if create_lesson(lesson_data):
                        added_count += 1
                        print(f"‚úÖ –£–†–û–ö –°–û–ó–î–ê–ù! –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {added_count}")
                    else:
                        print(f"‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –£–†–û–ö–ê!")
                else:
                    print(f"‚è≠Ô∏è –£–†–û–ö –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢, –ü–†–û–ü–£–°–ö–ê–ï–ú")
            
            current_date += timedelta(days=1)
    
    return added_count

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–ú–¨–Ø–ú–ò
# ============================================================================

def get_families():
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ —Å–µ–º—å–∏ –ø–æ parent_name (2+ –¥–µ—Ç–µ–π)"""
    query = """
        SELECT parent_name, COUNT(*) as children_count
        FROM students 
        WHERE parent_name IS NOT NULL AND parent_name != ''
        GROUP BY parent_name
        HAVING COUNT(*) > 1
    """
    families_result = execute_query(query, fetch=True)
    
    families = {}
    for family in families_result:
        parent_name = family['parent_name']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π —ç—Ç–æ–π —Å–µ–º—å–∏
        children_query = """
            SELECT id, name, class_level, city, timezone, contact, notes, lesson_price
            FROM students 
            WHERE parent_name = %s
            ORDER BY name
        """
        children = execute_query(children_query, (parent_name,), fetch=True)
        families[parent_name] = [dict(child) for child in children]
    
    return families

def get_family_members(parent_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –≤ —Å–µ–º—å–µ"""
    families = get_families()
    return families.get(parent_name, [])

def is_student_in_family(student_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —É—á–µ–Ω–∏–∫ –∫ —Å–µ–º—å–µ"""
    student = get_student_by_name(student_name)
    if not student:
        return False, None
    
    parent_name = student.get('parent_name', '').strip()
    if not parent_name:
        return False, None
    
    family_members = get_family_members(parent_name)
    return len(family_members) > 1, parent_name

def get_student_family_parent(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è —É—á–µ–Ω–∏–∫–∞"""
    student = get_student_by_name(student_name)
    return student.get('parent_name', '').strip() if student else None

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ï–ú–ï–ô–ù–´–• –ë–ê–õ–ê–ù–°–û–í
# ============================================================================

def get_family_balance(parent_name):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ–º—å–∏"""
    query = "SELECT * FROM families WHERE parent_name = %s"
    result = execute_query(query, (parent_name,), fetch_one=True)
    
    if not result:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–º–µ–π–Ω—ã–π –±–∞–ª–∞–Ω—Å
        family_balance = {
            "family_balance": 0,
            "total_family_paid": 0,
            "total_family_spent": 0,
            "created_at": datetime.now().isoformat()
        }
        
        create_query = """
            INSERT INTO families (parent_name, family_balance, total_family_paid, total_family_spent, created_at)
            VALUES (%s, %s, %s, %s, NOW())
        """
        execute_query(create_query, (parent_name, 0, 0, 0))
        return family_balance
    
    return {
        "family_balance": float(result['family_balance']),
        "total_family_paid": float(result['total_family_paid']),
        "total_family_spent": float(result['total_family_spent']),
        "created_at": result['created_at'].isoformat() if result['created_at'] else ""
    }

def save_family_balance(parent_name, balance_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–º–µ–π–Ω—ã–π –±–∞–ª–∞–Ω—Å"""
    query = """
        UPDATE families 
        SET family_balance = %s, total_family_paid = %s, total_family_spent = %s
        WHERE parent_name = %s
    """
    execute_query(query, (
        balance_data["family_balance"],
        balance_data["total_family_paid"], 
        balance_data["total_family_spent"],
        parent_name
    ))

def add_family_payment(parent_name, amount, description="–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"):
    """–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–µ–º–µ–π–Ω—ã–π –±–∞–ª–∞–Ω—Å"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    payment_query = """
        INSERT INTO payments (id, student_id, amount, payment_type, description, payment_date, created_at)
        VALUES (%s, NULL, %s, %s, %s, NOW(), NOW())
    """
    payment_id = generate_slot_id()
    execute_query(payment_query, (payment_id, amount, 'family_payment', f"–°–ï–ú–¨–Ø: {parent_name} - {description}"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–º–µ–π–Ω—ã–π –±–∞–ª–∞–Ω—Å
    family_balance = get_family_balance(parent_name)
    family_balance["family_balance"] += amount
    family_balance["total_family_paid"] += amount
    save_family_balance(parent_name, family_balance)
    
    return {
        "id": payment_id,
        "student_name": f"–°–ï–ú–¨–Ø: {parent_name}",
        "amount": amount,
        "type": "family_payment",
        "description": description,
        "date": datetime.now().isoformat(),
        "created_at": datetime.now().isoformat()
    }

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –í–†–ï–ú–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def get_weekday_num(day_name_ru):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0-6) –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é"""
    days_mapping = {
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
        "–í—Ç–æ—Ä–Ω–∏–∫": 1,
        "–°—Ä–µ–¥–∞": 2,
        "–ß–µ—Ç–≤–µ—Ä–≥": 3,
        "–ü—è—Ç–Ω–∏—Ü–∞": 4,
        "–°—É–±–±–æ—Ç–∞": 5,
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    return days_mapping.get(day_name_ru)

def get_weekday_ru(weekday_num):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[weekday_num]

def get_week_dates(year, week_number):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è 4 —è–Ω–≤–∞—Ä—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞ (—ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–µ ISO)
    jan_4 = datetime(year, 1, 4)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏
    first_monday = jan_4 - timedelta(days=jan_4.weekday())
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –Ω–µ–¥–µ–ª—é
    target_week_start = first_monday + timedelta(weeks=week_number - 1)
    
    week_dates = []
    days_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    
    for i in range(7):
        date = target_week_start + timedelta(days=i)
        week_dates.append({
            "date": date.strftime("%d.%m"),
            "full_date": date.strftime("%Y-%m-%d"),
            "day_name": days_names[i],
            "day_short": date.strftime("%a"),
            "is_today": date.date() == datetime.now().date()
        })
    
    return week_dates
# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô –ò –ë–ê–õ–ê–ù–°–û–í
# ============================================================================

def add_payment(student_name, amount, description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", payment_date=None):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ —É—á–µ–Ω–∏–∫–∞"""
    student = get_student_by_name(student_name)
    if not student:
        return None
    
    if payment_date is None:
        payment_date = datetime.now()
    elif isinstance(payment_date, str):
        try:
            payment_date = datetime.strptime(payment_date, '%Y-%m-%d')
        except:
            payment_date = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    payment_query = """
        INSERT INTO payments (id, student_id, amount, payment_type, description, payment_date, created_at)
        VALUES (%s, %s, %s, %s, %s, %s, NOW())
        RETURNING id
    """
    payment_id = generate_slot_id()
    result = execute_query(payment_query, (
        payment_id, student['id'], amount, 'payment', description, payment_date
    ), fetch_one=True)
    
    if result:
        return {
            "id": payment_id,
            "student_name": student_name,
            "amount": amount,
            "type": "payment",
            "description": description,
            "date": payment_date.isoformat(),
            "created_at": datetime.now().isoformat()
        }
    
    return None

def get_student_balance(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞"""
    student = get_student_by_name(student_name)
    if not student:
        return {
            "balance": 0,
            "lesson_price": 0,
            "total_paid": 0,
            "total_spent": 0,
            "lessons_taken": 0
        }
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —É—á–µ–Ω–∏–∫–∞
    payments_query = """
        SELECT SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as total_paid,
               SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END) as total_spent,
               SUM(amount) as balance
        FROM payments
        WHERE student_id = %s
    """
    payments_result = execute_query(payments_query, (student['id'],), fetch_one=True)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
    lessons_query = """
        SELECT COUNT(*) as lessons_taken
        FROM lessons
        WHERE student_id = %s AND status = 'completed'
    """
    lessons_result = execute_query(lessons_query, (student['id'],), fetch_one=True)
    
    return {
        "balance": float(payments_result['balance']) if payments_result['balance'] else 0,
        "lesson_price": float(student['lesson_price']) if student['lesson_price'] else 0,
        "total_paid": float(payments_result['total_paid']) if payments_result['total_paid'] else 0,
        "total_spent": float(payments_result['total_spent']) if payments_result['total_spent'] else 0,
        "lessons_taken": int(lessons_result['lessons_taken']) if lessons_result['lessons_taken'] else 0
    }

def get_student_payment_history(student_name, limit=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π —É—á–µ–Ω–∏–∫–∞"""
    student = get_student_by_name(student_name)
    if not student:
        return []
    
    query = """
        SELECT id, amount, payment_type as type, description, payment_date as date, created_at
        FROM payments
        WHERE student_id = %s
        ORDER BY payment_date DESC
    """
    
    if limit:
        query += f" LIMIT {limit}"
    
    result = execute_query(query, (student['id'],), fetch=True)
    
    payments = []
    for row in result:
        payment = dict(row)
        if payment['date']:
            payment['date'] = payment['date'].isoformat()
            payment['date_formatted'] = payment['date'][:10]  # YYYY-MM-DD
        payments.append(payment)
    
    return payments

def process_lesson_payment(student_name, lesson_id):
    """–°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–π —É—Ä–æ–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Ä–æ–∫ –ø—Ä–æ–±–Ω—ã–º
    lesson = get_lesson_by_id(lesson_id)
    if lesson and lesson.get('lesson_type') == 'trial':
        return True, "–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
    print(f"üîÑ –°–ü–ò–°–ê–ù–ò–ï: —É—Ä–æ–∫ {lesson_id}, —É—á–µ–Ω–∏–∫ {student_name}")
    print(f"üîÑ –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞: {lesson}")
    
    student = get_student_by_name(student_name)
    if not student:
        return False, "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    
    lesson_price = float(student['lesson_price']) if student['lesson_price'] else 0
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
    expense_query = """
        INSERT INTO payments (id, student_id, amount, payment_type, description, lesson_id, payment_date, created_at)
        VALUES (%s, %s, %s, %s, %s, %s, NOW(), NOW())
    """
    expense_id = generate_slot_id()
    result = execute_query(expense_query, (
        expense_id, student['id'], -lesson_price, 'expense', 
        f"–û–ø–ª–∞—Ç–∞ —É—Ä–æ–∫–∞ {lesson_id}", lesson_id
    ))
    print(f"üîÑ –ó–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∞: result={result}, amount={-lesson_price}")

    # –ü–æ–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    mark_paid_query = "UPDATE lessons SET is_paid = true WHERE id = %s"
    result2 = execute_query(mark_paid_query, (lesson_id,))
    print(f"üîÑ –£—Ä–æ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π: result={result2}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance = get_student_balance(student_name)
    
    return True, f"–£—Ä–æ–∫ –æ–ø–ª–∞—á–µ–Ω. –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {balance['balance']} —Ä—É–±."

def reset_student_balance(student_name):
    """–û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞"""
    student = get_student_by_name(student_name)
    if not student:
        return False
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    delete_query = "DELETE FROM payments WHERE student_id = %s"
    execute_query(delete_query, (student['id'],))
    
    return True

def get_financial_overview():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä –ø–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º"""
    # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    query = """
        SELECT 
            SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as total_paid,
            SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END) as total_spent,
            SUM(amount) as total_balance
        FROM payments p
        JOIN students s ON p.student_id = s.id
    """
    result = execute_query(query, fetch_one=True)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª–≥–∏ –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã —É—á–µ–Ω–∏–∫–æ–≤
    debt_query = """
        SELECT SUM(ABS(balance)) as total_debt
        FROM (
            SELECT student_id, SUM(amount) as balance
            FROM payments p
            JOIN students s ON p.student_id = s.id
            GROUP BY student_id
            HAVING SUM(amount) < 0
        ) negative_balances
    """
    debt_result = execute_query(debt_query, fetch_one=True)
    
    if not result:
        return {
            'total_prepaid': 0,
            'total_debt': 0,
            'total_balance': 0,
            'students_with_positive_balance': 0,
            'students_with_negative_balance': 0
        }
    
    total_balance = float(result['total_balance']) if result['total_balance'] else 0
    total_debt = float(debt_result['total_debt']) if debt_result and debt_result['total_debt'] else 0
    total_prepaid = total_balance if total_balance > 0 else 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    students_balances_query = """
        SELECT 
            COUNT(CASE WHEN balance > 0 THEN 1 END) as positive_count,
            COUNT(CASE WHEN balance < 0 THEN 1 END) as negative_count
        FROM (
            SELECT student_id, SUM(amount) as balance
            FROM payments p
            JOIN students s ON p.student_id = s.id
            GROUP BY student_id
        ) balances
    """
    balances_result = execute_query(students_balances_query, fetch_one=True)
    
    return {
        'total_prepaid': total_prepaid,
        'total_debt': total_debt,
        'total_balance': total_balance,
        'students_with_positive_balance': int(balances_result['positive_count']) if balances_result['positive_count'] else 0,
        'students_with_negative_balance': int(balances_result['negative_count']) if balances_result['negative_count'] else 0
    }

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –£–†–û–ö–û–í
# ============================================================================

def auto_update_lesson_statuses():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–∞"""
    today = datetime.now()
    
    # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
    query = """
        SELECT l.*, s.name as student_name
        FROM lessons l
        JOIN students s ON l.student_id = s.id
        WHERE l.status = 'scheduled'
        AND l.date IS NOT NULL
        AND l.time IS NOT NULL
        AND l.date + l.time + INTERVAL '1 minute' * COALESCE(l.lesson_duration, 60) < NOW()
    """
    
    overdue_lessons = execute_query(query, fetch=True)
    modified = False
    
    for lesson in overdue_lessons:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ (—É–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–º–µ—Ç–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π)
        update_query = """
            UPDATE lessons 
            SET status = 'completed'
            WHERE id = %s
        """
        execute_query(update_query, (lesson['id'],))

        # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
        success, message = process_lesson_payment(lesson['student_name'], lesson['id'])
        print(f"[AUTO_UPDATE] –£—Ä–æ–∫ {lesson['id']}: success={success}, message={message}")
        if success:
            # –ü–æ–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            paid_query = "UPDATE lessons SET is_paid = true WHERE id = %s"
            execute_query(paid_query, (lesson['id'],))
            print(f"‚úÖ –£—Ä–æ–∫ {lesson['id']} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞ {lesson['id']}: {message}")
        if success:
            print(f"[AUTO_UPDATE] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞: {message}")
        else:
            print(f"[AUTO_UPDATE] –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {message}")
        
        modified = True
    
    return modified

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
# ============================================================================

def get_lessons_stats(students):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    lessons_stats = {}
    
    for student in students:
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
        completed_query = """
            SELECT COUNT(*) as completed_lessons
            FROM lessons
            WHERE student_id = %s AND status = 'completed'
        """
        result = execute_query(completed_query, (student['id'],), fetch_one=True)
        
        lessons_stats[student['name']] = {
            'actual_completed': int(result['completed_lessons']) if result['completed_lessons'] else 0,
            'regular_planned_actual': 0  # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º 0
        }
    
    return lessons_stats

def get_student_widget_stats(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
    student = get_student_by_name(student_name)
    if not student:
        return {
            'completed_lessons': 0,
            'cancelled_lessons': 0,
            'planned_this_month': 0
        }
    
    today = datetime.now().date()
    current_month = today.month
    current_year = today.year
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    all_time_query = """
        SELECT 
            COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_lessons,
            COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_lessons
        FROM lessons
        WHERE student_id = %s
    """
    all_time_result = execute_query(all_time_query, (student['id'],), fetch_one=True)
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    month_query = """
        SELECT COUNT(*) as planned_this_month
        FROM lessons
        WHERE student_id = %s
        AND status = 'scheduled'
        AND from_template = true
        AND EXTRACT(MONTH FROM date) = %s
        AND EXTRACT(YEAR FROM date) = %s
    """
    month_result = execute_query(month_query, (student['id'], current_month, current_year), fetch_one=True)
    
    return {
        'completed_lessons': int(all_time_result['completed_lessons']) if all_time_result['completed_lessons'] else 0,
        'cancelled_lessons': int(all_time_result['cancelled_lessons']) if all_time_result['cancelled_lessons'] else 0,
        'planned_this_month': int(month_result['planned_this_month']) if month_result['planned_this_month'] else 0
    }

def get_student_payment_stats(student_name):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–µ–Ω–∏–∫–∞"""
    balance = get_student_balance(student_name)
    
    # –ó–∞–ø–∞—Å —É—Ä–æ–∫–æ–≤ (–æ–ø–ª–∞—á–µ–Ω–æ –≤–ø–µ—Ä–µ–¥)
    lesson_price = balance.get('lesson_price', 0)
    current_balance = balance.get('balance', 0)
    
    if lesson_price > 0 and current_balance > 0:
        lessons_in_stock = int(current_balance / lesson_price)
    else:
        lessons_in_stock = 0
    
    # –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã (–ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
    student = get_student_by_name(student_name)
    unpaid_lessons = 0
    
    if student:
        unpaid_query = """
            SELECT COUNT(*) as unpaid_lessons
            FROM lessons
            WHERE student_id = %s
            AND status = 'completed'
            AND (is_paid = false OR is_paid IS NULL)
            AND lesson_type != 'trial'
        """
        unpaid_result = execute_query(unpaid_query, (student['id'],), fetch_one=True)
        unpaid_lessons = int(unpaid_result['unpaid_lessons']) if unpaid_result['unpaid_lessons'] else 0
    
    return {
        'lessons_in_stock': lessons_in_stock,
        'unpaid_lessons': unpaid_lessons,
        'lesson_price': lesson_price
    }

def get_month_calendar(year, month):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏"""
    cal = calendar.monthcalendar(year, month)
    month_data = []
    
    for week in cal:
        week_data = []
        for day in week:
            if day == 0:
                week_data.append(None)
            else:
                date_obj = datetime(year, month, day)
                week_data.append({
                    'day': day,
                    'date': date_obj.strftime('%Y-%m-%d'),
                    'display_date': date_obj.strftime('%d.%m'),
                    'weekday': date_obj.strftime('%A'),
                    'weekday_ru': get_weekday_ru(date_obj.weekday()),
                    'is_today': date_obj.date() == datetime.now().date()
                })
        month_data.append(week_data)
    
    return month_data

def get_lessons_for_date(date_str, slots=None):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    if slots is None:
        slots = load_slots()
    
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    weekday_ru = get_weekday_ru(date_obj.weekday())
    
    lessons = []
    for slot in slots:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π
        if slot.get('date') == date_str:
            lessons.append(slot)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã)
        elif not slot.get('date') and slot.get('day') == weekday_ru:
            lessons.append(slot)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    lessons.sort(key=lambda x: x['time'])
    return lessons

def get_current_week_number():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    today = datetime.now()
    return today.isocalendar()[1]

def clear_all_lessons():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è"""
    try:
        execute_query("DELETE FROM lessons")
        return True, "–í—Å–µ –∑–∞–Ω—è—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}"

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–û–°–¢–£–ü–ù–´–• –°–õ–û–¢–û–í
# ============================================================================

def load_available_slots():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã"""
    query = """
        SELECT id, day_of_week as day, time, duration, slot_type as type, created_at
        FROM available_slots
        ORDER BY 
            CASE day_of_week
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                WHEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' THEN 7
            END, time
    """
    result = execute_query(query, fetch=True)
    
    slots = []
    for row in result:
        slot = {
            'id': row['id'],
            'day': row['day'],
            'time': str(row['time']),
            'duration': row['duration'],
            'type': row['type']
        }
        
        if row['created_at']:
            slot['created_at'] = row['created_at'].isoformat()
            
        slots.append(slot)
    
    return slots

def create_available_slot(slot_data):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç"""
    query = """
        INSERT INTO available_slots (id, day_of_week, time, duration, slot_type, created_at)
        VALUES (%s, %s, %s, %s, %s, NOW())
    """
    
    slot_id = slot_data.get('id', generate_slot_id())
    execute_query(query, (
        slot_id,
        slot_data.get('day'),
        slot_data.get('time'),
        slot_data.get('duration', 60),
        slot_data.get('type', 'permanent')
    ))
    
    return slot_id

def delete_available_slot(slot_index):
    """–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ—Ç–∞ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    query_get_id = """
        SELECT id FROM available_slots 
        ORDER BY 
            CASE day_of_week
                WHEN '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' THEN 1
                WHEN '–í—Ç–æ—Ä–Ω–∏–∫' THEN 2
                WHEN '–°—Ä–µ–¥–∞' THEN 3
                WHEN '–ß–µ—Ç–≤–µ—Ä–≥' THEN 4
                WHEN '–ü—è—Ç–Ω–∏—Ü–∞' THEN 5
                WHEN '–°—É–±–±–æ—Ç–∞' THEN 6
                WHEN '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' THEN 7
            END, time
        LIMIT 1 OFFSET %s
    """
    result = execute_query(query_get_id, (slot_index,), fetch_one=True)
    if not result:
        return False
        
    slot_id = result['id']
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
    delete_query = "DELETE FROM available_slots WHERE id = %s"
    execute_query(delete_query, (slot_id,))
    return True

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–∞–ª–µ–Ω–¥–∞—à–∏...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Ä–æ–∫–æ–≤ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Ä–æ–∫–æ–≤...")
    auto_update_lesson_statuses()
    
    print("–ö–∞–ª–µ–Ω–¥–∞—à–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò –û–ü–õ–ê–¢–´  
# ============================================================================

def get_predicted_income_current_month():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –¥–æ—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–ë–´–°–¢–†–û)"""
    today = datetime.now()
    year, month = today.year, today.month
    
    query = """
        SELECT SUM(s.lesson_price) as predicted_income
        FROM lessons l
        JOIN students s ON l.student_id = s.id
        WHERE l.lesson_type = 'regular'
        AND l.from_template = true
        AND l.status IN ('scheduled', 'completed')
        AND EXTRACT(MONTH FROM l.date) = %s
        AND EXTRACT(YEAR FROM l.date) = %s
    """
    result = execute_query(query, (month, year), fetch_one=True)
    
    return float(result['predicted_income']) if result and result['predicted_income'] else 0

def get_actual_income_current_month():
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–ë–´–°–¢–†–û)"""
    today = datetime.now()
    year, month = today.year, today.month
    
    query = """
        SELECT SUM(ABS(amount)) as actual_income
        FROM payments
        WHERE amount < 0
        AND payment_type = 'expense'
        AND EXTRACT(MONTH FROM payment_date) = %s
        AND EXTRACT(YEAR FROM payment_date) = %s
    """
    result = execute_query(query, (month, year), fetch_one=True)
    
    return float(result['actual_income']) if result and result['actual_income'] else 0

def get_month_student_detailed_stats(year, month):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É –∑–∞ –º–µ—Å—è—Ü (–ë–´–°–¢–†–û)"""
    print(f"üîç –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {month}/{year}")
    
    query = """
        SELECT 
            s.name,
            COUNT(CASE 
                WHEN l.from_template = true 
                AND l.status IN ('scheduled', 'completed', 'cancelled') 
                THEN 1 
            END) as regular_planned,
            COUNT(CASE WHEN l.status = 'completed' THEN 1 END) as total_completed,
            COUNT(CASE 
                WHEN l.status = 'cancelled' 
                AND l.from_template = true 
                THEN 1 
            END) as regular_cancelled
        FROM students s
        LEFT JOIN lessons l ON s.id = l.student_id 
            AND EXTRACT(MONTH FROM l.date) = %s
            AND EXTRACT(YEAR FROM l.date) = %s
        GROUP BY s.id, s.name
        ORDER BY s.name
    """
    result = execute_query(query, (month, year), fetch=True)
    
    student_stats = {}
    for row in result:
        print(f"üìä {row['name']}: —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö={row['regular_planned']}, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö={row['total_completed']}")
        student_stats[row['name']] = {
            'regular_planned': int(row['regular_planned']),
            'total_completed': int(row['total_completed']),
            'regular_cancelled': int(row['regular_cancelled']),
            'regular_planned_actual': int(row['regular_planned']),
            'actual_completed': int(row['total_completed'])
        }
    
    return student_stats

def get_student_by_id(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ –ø–æ ID"""
    query = "SELECT * FROM students WHERE id = %s"
    result = execute_query(query, (student_id,), fetch_one=True)
    return dict(result) if result else None

def get_student_balance(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–ª–∞—Ç
    return {'balance': 0}

def get_student_lessons_count(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞"""
    query = """
        SELECT 
            COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_lessons,
            COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_lessons,
            COUNT(CASE WHEN status = 'scheduled' THEN 1 END) as planned_lessons
        FROM lessons 
        WHERE student_id = %s
    """
    result = execute_query(query, (student_id,), fetch_one=True)
    if result:
        return {
            'completed_lessons': result['completed_lessons'] or 0,
            'cancelled_lessons': result['cancelled_lessons'] or 0,
            'planned_lessons': result['planned_lessons'] or 0
        }
    return {'completed_lessons': 0, 'cancelled_lessons': 0, 'planned_lessons': 0}

def get_student_schedule_data(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    from datetime import datetime, timedelta
    
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())
    sunday = monday + timedelta(days=6)
    
    query = """
        SELECT date, time, subject, status, lesson_duration
        FROM lessons
        WHERE student_id = %s
        AND date BETWEEN %s AND %s
        ORDER BY date, time
    """
    result = execute_query(query, (student_id, monday, sunday), fetch=True)
    
    week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    week_data = []
    
    for i, day_name in enumerate(week_days):
        current_date = monday + timedelta(days=i)
        day_lessons = []
        
        if result:
            for lesson in result:
                if lesson['date'] == current_date:
                    day_lessons.append({
                        'time': lesson['time'].strftime('%H:%M'),
                        'subject': lesson['subject'],
                        'status': lesson['status']
                    })
        
        week_data.append({
            'day_name': day_name,
            'day_number': current_date.day,
            'full_date': current_date.strftime('%Y-%m-%d'),
            'is_today': current_date == today,
            'lessons': day_lessons
        })
    
    return {
        'week_data': week_data,
        'week_info': {
            'title': f'–ù–µ–¥–µ–ª—è {today.isocalendar()[1]}, {today.year}',
            'period': f'—Å {monday.strftime("%d.%m")} –ø–æ {sunday.strftime("%d.%m")}'
        }
    }

def get_student_exam_results(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ —É—á–µ–Ω–∏–∫–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return []

def get_student_topic_progress(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return {'fully': 0, 'questions': 0, 'needwork': 0}

def get_student_lesson_reports(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —É—Ä–æ–∫–∞–º —É—á–µ–Ω–∏–∫–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return []

def get_student_homework(student_id):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return []

def get_parent_children(parent_name):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è"""
    query = "SELECT * FROM students WHERE parent_name = %s ORDER BY name"
    result = execute_query(query, (parent_name,), fetch=True)
    return [dict(row) for row in result] if result else []

# ============================================================================
# FLASK –ú–ê–†–®–†–£–¢–´
# ============================================================================

@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ URL - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
    token = request.args.get('token')
    if token and not session.get('admin_logged_in'):
        # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
        session['admin_logged_in'] = True
        session.permanent = True
        session['admin_token'] = token
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL
        return redirect(url_for('home'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not session.get('admin_logged_in') and not request.args.get('token'):
        return redirect("http://127.0.0.1:8080/admin-auth")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –¥–Ω—è)
    from datetime import datetime, timedelta
    four_days_ago = datetime.now().date() - timedelta(days=4)
    
    recent_lessons_query = """
        SELECT l.id, l.date, l.time, l.subject, s.name as student_name
        FROM lessons l
        JOIN students s ON l.student_id = s.id
        WHERE l.status = 'completed'
        AND l.date >= %s
        ORDER BY l.date DESC, l.time DESC
        LIMIT 10
    """
    recent_lessons = execute_query(recent_lessons_query, (four_days_ago,), fetch=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤
    lessons_data = []
    if recent_lessons:
        for lesson in recent_lessons:
            lessons_data.append({
                'id': lesson['id'],
                'date': lesson['date'].strftime('%d.%m.%Y'),
                'time': lesson['time'].strftime('%H:%M'),
                'subject': lesson['subject'],
                'student_name': lesson['student_name']
            })

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    students_accounts_query = """
        SELECT 
            s.id, s.name, s.class_level, s.parent_name,
            us.login as student_login, us.password as student_password,
            up.login as parent_login, up.password as parent_password
        FROM students s
        LEFT JOIN user_accounts us ON s.id = us.student_id AND us.role = 'student'
        LEFT JOIN user_accounts up ON s.id = up.student_id AND up.role = 'parent'
        ORDER BY s.name
    """
    students_accounts = execute_query(students_accounts_query, fetch=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —É—á–µ–Ω–∏–∫–æ–≤
    accounts_data = []
    if students_accounts:
        for row in students_accounts:
            accounts_data.append({
                'student_id': row['id'],
                'student_name': row['name'],
                'student_class': row['class_level'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                'student_login': row['student_login'] or '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞',
                'student_password': row['student_password'] or '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞',
                'parent_name': row['parent_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                'has_student_account': bool(row['student_login']),
                'has_parent_account': bool(row['parent_login'])
            })

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ —Å–µ–º—å—è–º (–ë–ï–ó –õ–ò–®–ù–ï–ì–û –û–¢–°–¢–£–ü–ê!)
    families_data = {}
    if students_accounts:
        for row in students_accounts:
            parent_name = row['parent_name']
            if parent_name and parent_name != '' and parent_name != '–ù–µ —É–∫–∞–∑–∞–Ω':
                if parent_name not in families_data:
                    families_data[parent_name] = {
                        'parent_name': parent_name,
                        'children': [],
                        'parent_login': row['parent_login'] or '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞',
                        'parent_password': row['parent_password'] or '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞',
                        'has_parent_account': bool(row['parent_login'])
                    }
                
                families_data[parent_name]['children'].append(row['name'])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    families_list = list(families_data.values())

    return render_template("home.html", 
                        recent_lessons=lessons_data,
                        accounts_data=accounts_data,
                        families_data=families_list,
                        admin_token=session.get('admin_token'))

@app.route("/add-lesson-report", methods=["POST"])
def add_lesson_report():
    # –¢—É—Ç —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞—à—É:
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É"""
    try:
        lesson_id = request.form.get('lesson_id')
        topic = request.form.get('topic')
        understanding_level = request.form.get('understanding_level')
        teacher_comment = request.form.get('teacher_comment')
        homework_assigned = request.form.get('homework_assigned')
        exam_score = request.form.get('exam_score')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        lesson = get_lesson_by_id(lesson_id)
        if not lesson:
            return f"<script>alert('–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!'); window.location.href='/';</script>"
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–∞
        student = get_student_by_name(lesson['student'])
        if not student:
            return f"<script>alert('–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!'); window.location.href='/';</script>"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É
        report_query = """
            INSERT INTO lesson_reports (lesson_id, student_id, topic, understanding_level, teacher_comment, homework_assigned, created_at)
            VALUES (%s, %s, %s, %s, %s, %s, NOW())
        """
        execute_query(report_query, (lesson_id, student['id'], topic, understanding_level, teacher_comment, homework_assigned))
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–Ω–∏–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        if exam_score and exam_score.strip():
            exam_query = """
                INSERT INTO exam_results (student_id, exam_date, secondary_score, created_at)
                VALUES (%s, %s, %s, NOW())
            """
            lesson_date = datetime.strptime(lesson['date'], '%Y-%m-%d').date()
            execute_query(exam_query, (student['id'], lesson_date, int(exam_score)))
        
        return f"<script>alert('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'); window.location.href='/';</script>"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return f"<script>alert('–û—à–∏–±–∫–∞: {e}'); window.location.href='/';</script>"

@app.route("/admin/student/<int:student_id>")
def admin_student_view(student_id):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –õ–ö–£ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ü–µ—Ä–µ—Ö–æ–¥...</title>
    </head>
    <body>
        <p>–û—Ç–∫—Ä—ã–≤–∞–µ–º –õ–ö–£ —É—á–µ–Ω–∏–∫–∞...</p>
        <script>
            window.open("http://127.0.0.1:8080/admin-student/{student_id}", "_blank");
            setTimeout(function() {{
                window.location.href = "/";
            }}, 500);
        </script>
    </body>
    </html>
    '''

@app.route("/admin/parent/<parent_name>")
def admin_parent_view(parent_name):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –õ–ö–† —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    import urllib.parse
    encoded_name = urllib.parse.quote(parent_name)
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ü–µ—Ä–µ—Ö–æ–¥...</title>
    </head>
    <body>
        <p>–û—Ç–∫—Ä—ã–≤–∞–µ–º –õ–ö–† —Ä–æ–¥–∏—Ç–µ–ª—è...</p>
        <script>
            window.open("http://127.0.0.1:8080/admin-parent/{encoded_name}", "_blank");
            setTimeout(function() {{
                window.location.href = "/";
            }}, 500);
        </script>
    </body>
    </html>
    '''

@app.route("/—É—á–µ–Ω–∏–∫–∏")
def ucheniki():
    if not session.get('admin_logged_in'):
        print(f"üîç –û–¢–õ–ê–î–ö–ê: session = {dict(session)}")
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    students = load_students()
    return render_template("ucheniki.html", students=students)

@app.route("/—É—á–µ–Ω–∏–∫–∏/–¥–æ–±–∞–≤–∏—Ç—å", methods=["GET", "POST"])
def add_student():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    if request.method == "POST":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        class_value = request.form.get("class", "").strip()
        custom_class = request.form.get("custom_class", "").strip()
        
        if class_value == "–î—Ä—É–≥–æ–µ" and custom_class:
            class_value = custom_class
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞
        lesson_price = request.form.get("lesson_price", "0")
        try:
            lesson_price = float(lesson_price)
        except (ValueError, TypeError):
            lesson_price = 0
        
        student_data = {
            "name": request.form.get("name", "").strip(),
            "class": class_value,
            "city": request.form.get("city", "").strip(),
            "timezone": request.form.get("timezone", "–ú–°–ö"),
            "parent_name": request.form.get("parent_name", "").strip(),
            "contact": request.form.get("contact", "").strip(),
            "notes": request.form.get("notes", "").strip(),
            "lesson_price": lesson_price
        }
        
        if student_data["name"]:
            save_student(student_data)
            return redirect(url_for("ucheniki"))
    
    return render_template("add_student.html")

@app.route("/—É—á–µ–Ω–∏–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/<int:index>", methods=["GET", "POST"])
def edit_student(index):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    students = load_students()
    
    if index < 0 or index >= len(students):
        return redirect(url_for("ucheniki"))
    
    student = students[index]
    
    if request.method == "POST":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        class_value = request.form.get("class", "").strip()
        custom_class = request.form.get("custom_class", "").strip()
        
        if class_value == "–î—Ä—É–≥–æ–µ" and custom_class:
            class_value = custom_class
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞
        lesson_price = request.form.get("lesson_price", "0")
        try:
            lesson_price = float(lesson_price)
        except (ValueError, TypeError):
            lesson_price = student.get('lesson_price', 0)
        
        old_name = student["name"]
        new_name = request.form.get("name", "").strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
        student_data = {
            "name": new_name,
            "class": class_value,
            "city": request.form.get("city", "").strip(),
            "timezone": request.form.get("timezone", "–ú–°–ö"),
            "parent_name": request.form.get("parent_name", "").strip(),
            "contact": request.form.get("contact", "").strip(),
            "notes": request.form.get("notes", "").strip(),
            "lesson_price": lesson_price
        }
        
        update_student(student['id'], student_data)
        
        # –ï—Å–ª–∏ –∏–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if old_name != new_name:
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫–∏
            update_query = "UPDATE lessons SET student_id = %s WHERE student_id = %s"
            execute_query(update_query, (student['id'], student['id']))
        
        return redirect(url_for("ucheniki"))
    
    return render_template("edit_student.html", student=student, index=index)

@app.route("/—É—á–µ–Ω–∏–∫–∏/—É–¥–∞–ª–∏—Ç—å/<int:index>", methods=["POST"])
def delete_student(index):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    students = load_students()
    if 0 <= index < len(students):
        student = students[index]
        delete_student_completely(student['id'])
    return redirect(url_for("ucheniki"))

@app.route("/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@app.route("/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/<view_type>")
@app.route("/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/<view_type>/<int:year>/<int:period>")
def raspisanie(view_type=None, year=None, period=None):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—Ä–æ–∫–æ–≤
    auto_update_lesson_statuses()
    
    today = datetime.now()
    
    # –ï—Å–ª–∏ view_type –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if view_type is None:
        view_type = "week"
        current_year = today.year
        current_week = today.isocalendar()[1]
        return redirect(url_for("raspisanie", view_type="week", year=current_year, period=current_week))
    
    if view_type == "week":
        if year is None or period is None:
            year, period = today.year, today.isocalendar()[1]
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
        prev_week = period - 1 if period > 1 else 52
        prev_year = year if period > 1 else year - 1
        next_week = period + 1 if period < 52 else 1
        next_year = year if period < 52 else year + 1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        week_dates = get_week_dates(year, period)
        slots = load_slots()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è –∫ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
        for date_info in week_dates:
            date_lessons = get_lessons_for_date(date_info['full_date'], slots)
            date_info['lessons'] = date_lessons
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –Ω–µ–¥–µ–ª–∏
        week_start = datetime.strptime(f"{year}-W{period:02d}-1", "%Y-W%W-%w")
        week_end = week_start + timedelta(days=6)
        
        month_names = {
            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
            7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
        }
        
        start_month = month_names.get(week_start.month, "")
        end_month = month_names.get(week_end.month, "")
        
        if week_start.month == week_end.month:
            week_info = f"—Å {week_start.day} –ø–æ {week_end.day} {end_month}"
        else:
            week_info = f"—Å {week_start.day} {start_month} –ø–æ {week_end.day} {end_month}"
        
        return render_template("raspisanie.html",
                             view_type="week",
                             week_dates=week_dates,
                             week_info=week_info,
                             year=year,
                             week=period,
                             prev_year=prev_year,
                             prev_week=prev_week,
                             next_year=next_year,
                             next_week=next_week)
    else:  # month view
        if year is None or period is None:
            year, period = today.year, today.month
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        if period == 1:
            prev_year, prev_month = year - 1, 12
        else:
            prev_year, prev_month = year, period - 1
        
        if period == 12:
            next_year, next_month = year + 1, 1
        else:
            next_year, next_month = year, period + 1
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
        month_calendar = get_month_calendar(year, period)
        slots = load_slots()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è –∫ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
        for week in month_calendar:
            for day in week:
                if day:
                    date_lessons = get_lessons_for_date(day['date'], slots)
                    day['lessons'] = date_lessons
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_names = {
            1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
            5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
            9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
        }
        month_name = month_names.get(period, "–ú–µ—Å—è—Ü")
        
        return render_template("raspisanie.html",
                             view_type="month",
                             month_calendar=month_calendar,
                             year=year,
                             month=period,
                             month_name=month_name,
                             prev_year=prev_year,
                             prev_month=prev_month,
                             next_year=next_year,
                             next_month=next_month)

@app.route("/–∞–¥–º–∏–Ω/–æ—á–∏—Å—Ç–∏—Ç—å-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", methods=["POST"])
def clear_schedule():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    success, message = clear_all_lessons()
    if success:
        return f"<script>alert('{message}'); window.location.href='/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';</script>"
    else:
        return f"<script>alert('–û—à–∏–±–∫–∞: {message}'); window.location.href='/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';</script>"

@app.route("/–¥–æ–±–∞–≤–∏—Ç—å-–∑–∞–Ω—è—Ç–∏–µ", methods=["GET", "POST"])
def add_slot():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    students = load_students()
    
    if request.method == "POST":
        subject = request.form.get("subject")
        if subject == "–î—Ä—É–≥–æ–µ":
            subject = request.form.get("custom_subject", "–£—Ä–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞
        lesson_duration = request.form.get("lesson_duration", "60")
        try:
            lesson_duration = int(lesson_duration)
            if lesson_duration < 10:
                lesson_duration = 60
            elif lesson_duration > 300:
                lesson_duration = 300
        except (ValueError, TypeError):
            lesson_duration = 60

        lesson_data = {
            "id": generate_slot_id(),
            "date": request.form.get("specific_date"),
            "time": request.form.get("time"),
            "student": request.form.get("student_name"),
            "subject": subject,
            "status": "scheduled",
            "from_template": False,
            "lesson_duration": lesson_duration
        }
        
        create_lesson(lesson_data)
        return redirect(url_for("raspisanie"))
    
    return render_template("add_slot.html", students=students)

@app.route("/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏", methods=["GET", "POST"])
def shablon_nedeli():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    students = load_students()
    template = load_template_week()
    
    if request.method == "POST":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if 'edit_index' in request.form:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
            try:
                edit_index = int(request.form.get('edit_index'))
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edit_lesson_duration = request.form.get("edit_lesson_duration", "60")
                try:
                    edit_lesson_duration = int(edit_lesson_duration)
                    if edit_lesson_duration < 10:
                        edit_lesson_duration = 60
                    elif edit_lesson_duration > 300:
                        edit_lesson_duration = 300
                except (ValueError, TypeError):
                    edit_lesson_duration = 60

                lesson_data = {
                    "day": request.form.get("edit_day"),
                    "time": request.form.get("edit_time"),
                    "student": request.form.get("edit_student"),
                    "subject": request.form.get("edit_subject"),
                    "start_date": request.form.get("edit_start_date", ""),
                    "end_date": request.form.get("edit_end_date", ""),
                    "lesson_type": request.form.get("edit_lesson_type", "regular"),
                    "lesson_duration": edit_lesson_duration
                }
                update_template_lesson(edit_index, lesson_data)
            except (ValueError, IndexError):
                pass
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
            subject = request.form.get("subject")
            if subject == "–î—Ä—É–≥–æ–µ":
                subject = request.form.get("custom_subject", "–£—Ä–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞
            lesson_duration = request.form.get("lesson_duration", "60")
            try:
                lesson_duration = int(lesson_duration)
                if lesson_duration < 10:
                    lesson_duration = 60
                elif lesson_duration > 300:
                    lesson_duration = 300
            except (ValueError, TypeError):
                lesson_duration = 60

            lesson_data = {
                "day": request.form.get("day"),
                "time": request.form.get("time"),
                "student": request.form.get("student_name"),
                "subject": subject,
                "start_date": request.form.get("start_date", ""),
                "end_date": request.form.get("end_date", ""),
                "lesson_type": request.form.get("lesson_type", "regular"),
                "lesson_duration": lesson_duration
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω
            add_template_lesson(lesson_data)
        
        return redirect(url_for("shablon_nedeli"))
    
    return render_template("shablon_nedeli.html", students=students, template=template)

@app.route("/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏/—É–¥–∞–ª–∏—Ç—å/<int:index>", methods=["POST"])
def delete_template_lesson_route(index):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏"""
    print(f" –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {index}")
    success = delete_template_lesson(index)
    
    if success:
        print(f"‚úÖ –£—Ä–æ–∫ {index} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ {index} –∏–∑ —à–∞–±–ª–æ–Ω–∞")
    
    return redirect(url_for("shablon_nedeli"))

@app.route("/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏/—É—Ä–æ–∫/<int:index>/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", methods=["GET", "POST"])
def edit_template_lesson_page(index):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    template = load_template_week()
    students = load_students()
    
    if index < 0 or index >= len(template):
        return "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    
    lesson = template[index]
    
    if request.method == "POST":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject = request.form.get("subject")
        if subject == "–î—Ä—É–≥–æ–µ":
            subject = request.form.get("custom_subject", "–£—Ä–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞
        lesson_duration = request.form.get("lesson_duration", "60")
        try:
            lesson_duration = int(lesson_duration)
            if lesson_duration < 10:
                lesson_duration = 60
            elif lesson_duration > 300:
                lesson_duration = 300
        except (ValueError, TypeError):
            lesson_duration = 60

        lesson_data = {
            "day": request.form.get("day"),
            "time": request.form.get("time"),
            "student": request.form.get("student"),
            "subject": subject,
            "start_date": request.form.get("start_date", ""),
            "end_date": request.form.get("end_date", ""),
            "lesson_type": request.form.get("lesson_type", "regular"),
            "lesson_duration": lesson_duration
        }
        
        success = update_template_lesson(index, lesson_data)
        if success:
            return f"<script>alert('–£—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω!'); window.location.href='/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏';</script>"
        else:
            return "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞", 500
    
    return render_template("edit_template_lesson.html", lesson=lesson, students=students, index=index)

@app.route("/–ø—Ä–∏–º–µ–Ω–∏—Ç—å-—à–∞–±–ª–æ–Ω", methods=["POST"])
def apply_template_week():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–æ–≤"""
    try:
        added_count = apply_template_to_schedule_with_periods()
        
        if added_count > 0:
            message = f'–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∑–∞–Ω—è—Ç–∏–π —Å —É—á–µ—Ç–æ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤!'
        else:
            message = '–ù–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —É—Ä–æ–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)'
        
        return f"<script>alert('{message}'); window.location.href='/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏';</script>"
        
    except Exception as e:
        return f"<script>alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}'); window.location.href='/—à–∞–±–ª–æ–Ω-–Ω–µ–¥–µ–ª–∏';</script>"

@app.route("/–æ–ø–ª–∞—Ç–∞")
@app.route("/–æ–ø–ª–∞—Ç–∞/<int:year>/<int:month>")
def oplata(year=None, month=None):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    # –£–±–∏—Ä–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é!
    auto_update_lesson_statuses()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if year is None or month is None:
        today = datetime.now()
        year, month = today.year, today.month
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    if month == 1:
        prev_year, prev_month = year - 1, 12
    else:
        prev_year, prev_month = year, month - 1
    
    if month == 12:
        next_year, next_month = year + 1, 1
    else:
        next_year, next_month = year, month + 1
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    students = load_students()
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    balances = {}
    balances_query = """
        SELECT 
            s.name,
            s.lesson_price,
            COALESCE(SUM(CASE WHEN p.amount > 0 THEN p.amount ELSE 0 END), 0) as total_paid,
            COALESCE(SUM(CASE WHEN p.amount < 0 THEN ABS(p.amount) ELSE 0 END), 0) as total_spent,
            COALESCE(SUM(p.amount), 0) as balance
        FROM students s
        LEFT JOIN payments p ON s.id = p.student_id
        GROUP BY s.id, s.name, s.lesson_price
        ORDER BY s.name
    """

    balances_result = execute_query(balances_query, fetch=True)

    # –û—Ç–¥–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
    lessons_count_query = """
        SELECT s.name, COUNT(l.id) as lessons_taken
        FROM students s
        LEFT JOIN lessons l ON s.id = l.student_id AND l.status = 'completed'
        GROUP BY s.id, s.name
    """
    lessons_counts = execute_query(lessons_count_query, fetch=True)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Ä–æ–∫–æ–≤
    lessons_dict = {row['name']: row['lessons_taken'] for row in lessons_counts}

    for row in balances_result:
        balances[row['name']] = {
            'balance': float(row['balance']),
            'lesson_price': float(row['lesson_price']) if row['lesson_price'] else 0,
            'total_paid': float(row['total_paid']),
            'total_spent': float(row['total_spent']),
            'lessons_taken': lessons_dict.get(row['name'], 0)  # –ë–µ—Ä–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        }
    
    # –ù–∞—Å—Ç–æ—è—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä
    financial_overview = get_financial_overview()
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }
    current_month_name = month_names.get(month, "–ú–µ—Å—è—Ü")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    families = get_families()
    families_data = {}

    for parent_name, children in families.items():
        family_balance = get_family_balance(parent_name)
        
        families_data[parent_name] = {
            'children': children,
            'balance': family_balance['family_balance'],
            'total_paid': family_balance['total_family_paid'],
            'total_spent': family_balance['total_family_spent']
        }

    return render_template("oplata.html", 
                         students=students,
                         balances=balances,
                         financial_overview=financial_overview,
                         predicted_income=get_predicted_income_current_month(),
                         actual_income=get_actual_income_current_month(),
                         student_detailed_stats=get_month_student_detailed_stats(year, month),
                         current_month_name=current_month_name,
                         current_year=year,
                         prev_year=prev_year, 
                         prev_month=prev_month,
                         next_year=next_year, 
                         next_month=next_month,
                         families=families_data)

@app.route("/–¥–æ–±–∞–≤–∏—Ç—å-–ø–ª–∞—Ç–µ–∂", methods=["GET", "POST"])
def add_payment_page():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    if request.method == "GET":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        students = load_students()
        families = get_families()
        return render_template("add_payment.html", students=students, families=families)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞
    payment_type = request.form.get("payment_type", "student")
    recipient = request.form.get("recipient")
    amount = float(request.form.get("amount", 0))
    description = request.form.get("description", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    payment_date = request.form.get("payment_date")
    
    if payment_type == "family":
        # –°–µ–º–µ–π–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if recipient and amount > 0:
            add_family_payment(recipient, amount, description)
    else:
        # –û–±—ã—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—á–µ–Ω–∏–∫—É
        if recipient and amount > 0:
            add_payment(recipient, amount, description, payment_date)
    
    return redirect(url_for("oplata"))

@app.route("/–∏—Å—Ç–æ—Ä–∏—è-–ø–ª–∞—Ç–µ–∂–µ–π")
@app.route("/–∏—Å—Ç–æ—Ä–∏—è-–ø–ª–∞—Ç–µ–∂–µ–π/<student_name>")
def payment_history_page(student_name=None):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    students = load_students()
    
    if not student_name:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞
        return render_template("payment_history.html", students=students)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    payments = get_student_payment_history(student_name)
    balance = get_student_balance(student_name)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for payment in payments:
        try:
            if payment['date']:
                date_obj = datetime.fromisoformat(payment['date'])
                payment['date_formatted'] = date_obj.strftime('%d.%m.%Y')
            else:
                payment['date_formatted'] = payment['date']
        except:
            payment['date_formatted'] = payment['date']
    
    return render_template("payment_history.html", 
                         students=students,
                         student_name=student_name,
                         payments=payments,
                         total_paid=balance.get('total_paid', 0),
                         total_spent=balance.get('total_spent', 0),
                         current_balance=balance.get('balance', 0),
                         lessons_taken=balance.get('lessons_taken', 0))

@app.route("/–æ–±–Ω—É–ª–∏—Ç—å-–±–∞–ª–∞–Ω—Å/<student_name>", methods=["POST"])
def reset_balance_route(student_name):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    success = reset_student_balance(student_name)
    if success:
        return f"<script>alert('–ë–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞ {student_name} –æ–±–Ω—É–ª–µ–Ω!'); window.location.href='/–æ–ø–ª–∞—Ç–∞';</script>"
    else:
        return f"<script>alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞'); window.location.href='/–æ–ø–ª–∞—Ç–∞';</script>"

@app.route("/–Ω–∞–≥—Ä—É–∑–∫–∞")
def nagruzka():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    return render_template("nagruzka.html")

@app.route("/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞-—Å–ª–æ—Ç–æ–≤", methods=["GET", "POST"])
def setup_slots():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    if request.method == "POST":
        try:
            slots = load_available_slots()
            
            add_type = request.form.get("add_type")
            time_scope = request.form.get("time_scope")
            slot_duration = int(request.form.get("slot_duration", 60))
            slot_gap = int(request.form.get("slot_gap", 0))
            
            new_slots = []
            
            if add_type == "single":
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
                day = request.form.get("single_day")
                time = request.form.get("single_time")
                
                if day and time:
                    new_slot_data = {
                        "day": day,
                        "time": time,
                        "duration": slot_duration,
                        "type": time_scope
                    }
                    create_available_slot(new_slot_data)
            
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–ª–æ—Ç–æ–≤
                selected_days = request.form.getlist("group_days")
                start_time = request.form.get("time_start")
                end_time = request.form.get("time_end")
                
                if selected_days and start_time and end_time:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                    time_slots = generate_time_slots(start_time, end_time, slot_duration, slot_gap)
                    
                    for day in selected_days:
                        for time_slot in time_slots:
                            new_slot_data = {
                                "day": day,
                                "time": time_slot,
                                "duration": slot_duration,
                                "type": time_scope
                            }
                            create_available_slot(new_slot_data)
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        
        return redirect(url_for("setup_slots"))
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    slots = load_available_slots()
    return render_template("setup_slots.html", slots=slots)

@app.route("/—É–¥–∞–ª–∏—Ç—å-—Å–ª–æ—Ç/<int:slot_id>", methods=["POST"])
def delete_slot(slot_id):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞"""
    delete_available_slot(slot_id)
    return redirect(url_for("setup_slots"))

@app.route("/api/delete-slot/<slot_id>", methods=["POST"])
def delete_slot_by_id(slot_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –ø–æ ID —á–µ—Ä–µ–∑ API"""
    print(f"–£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç —Å ID: {slot_id}")
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
    slots = load_available_slots()
    slot_index = None
    
    for i, slot in enumerate(slots):
        if slot.get('id') == slot_id:
            slot_index = i
            break
    
    if slot_index is not None:
        success = delete_available_slot(slot_index)
        if success:
            return {"success": True, "message": "–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω"}
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"}, 500
    else:
        return {"success": False, "message": "–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}, 404

@app.route("/schedule/lesson/<lesson_id>/edit", methods=["GET", "POST"])
def edit_lesson_from_schedule(lesson_id):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    students = load_students()
    lesson = get_lesson_by_id(lesson_id)
    
    if not lesson:
        return render_template("edit_lesson.html", 
                             lesson=None, 
                             students=students, 
                             error="–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if request.method == "POST":
        action = request.form.get("action")
        
        if action == "cancel":
            # –û—Ç–º–µ–Ω–∞ —É—Ä–æ–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–Ω–µ–≥
            lesson = get_lesson_by_id(lesson_id)
            if lesson and lesson.get('status') == 'completed':
                # –ï—Å–ª–∏ —É—Ä–æ–∫ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
                student = get_student_by_name(lesson['student'])
                if student:
                    lesson_price = float(student['lesson_price']) if student['lesson_price'] else 0
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                    if lesson_price > 0:
                        refund_query = """
                            INSERT INTO payments (id, student_id, amount, payment_type, description, lesson_id, payment_date, created_at)
                            VALUES (%s, %s, %s, %s, %s, %s, NOW(), NOW())
                        """
                        refund_id = generate_slot_id()
                        execute_query(refund_query, (
                            refund_id, student['id'], lesson_price, 'refund', 
                            f"–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫ {lesson_id}", lesson_id
                        ))
                        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {lesson_price} —Ä—É–±. –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫ {lesson_id}")
                    
                    # –£–±–∏—Ä–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –æ–ø–ª–∞—Ç–µ
                    unpaid_query = "UPDATE lessons SET is_paid = false WHERE id = %s"
                    execute_query(unpaid_query, (lesson_id,))
            
            # –û—Ç–º–µ–Ω—è–µ–º —É—Ä–æ–∫
            update_lesson_status(lesson_id, 'cancelled')
            return redirect(url_for("raspisanie"))
        
        elif action == "save":
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            new_date = request.form.get("date")
            new_time = request.form.get("time") 
            new_student = request.form.get("student")
            new_subject = request.form.get("subject")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            if new_subject == "–î—Ä—É–≥–æ–µ":
                new_subject = request.form.get("custom_subject", "–£—Ä–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞
            lesson_duration = request.form.get("lesson_duration", "60")
            try:
                lesson_duration = int(lesson_duration)
                if lesson_duration < 10:
                    lesson_duration = 60
                elif lesson_duration > 300:
                    lesson_duration = 300
            except (ValueError, TypeError):
                lesson_duration = 60
            
            lesson_data = {
                'date': new_date,
                'time': new_time,
                'student': new_student,
                'subject': new_subject,
                'lesson_duration': lesson_duration
            }
            
            update_lesson(lesson_id, lesson_data)
            return redirect(url_for("raspisanie"))
        
        elif action == "delete":
            # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
            print(f"–£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ —Å ID: {lesson_id}")
            success = delete_lesson(lesson_id)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {success}")
            return redirect(url_for("raspisanie"))
        
            # –î–æ–±–∞–≤—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É:
            if success:
                print(f"–£—Ä–æ–∫ {lesson_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            else:
                print(f"–û—à–∏–±–∫–∞: —É—Ä–æ–∫ {lesson_id} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
            
            return redirect(url_for("raspisanie"))
    
    return render_template("edit_lesson.html", lesson=lesson, students=students)

def generate_time_slots(start_time, end_time, duration, gap):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    slots = []
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    start_hour, start_minute = map(int, start_time.split(':'))
    end_hour, end_minute = map(int, end_time.split(':'))
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç—ã
    start_minutes = start_hour * 60 + start_minute
    end_minutes = end_hour * 60 + end_minute
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
    current_minutes = start_minutes
    while current_minutes + duration <= end_minutes:
        hours = current_minutes // 60
        minutes = current_minutes % 60
        time_str = f"{hours:02d}:{minutes:02d}"
        slots.append(time_str)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ—Ç—É
        current_minutes += duration + gap
    
    return slots

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found_error(error):
    return render_template('base.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('base.html'), 500

@app.route("/–¥–æ–±–∞–≤–∏—Ç—å-–ø—Ä–æ–±–Ω—ã–π-—É—Ä–æ–∫", methods=["GET", "POST"])
def add_trial_lesson_route():
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    if request.method == "GET":
        return render_template("add_trial_lesson.html")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞
    try:
        date = request.form.get('date')
        time = request.form.get('time') 
        student_name = request.form.get('student_name', '').strip()
        subject = request.form.get('subject', '–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫')
        lesson_duration = int(request.form.get('lesson_duration', 60))
        
        if not date or not time or not student_name:
            return jsonify({"success": False, "error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫
        lesson_data = {
            "id": generate_slot_id(),
            "date": date,
            "time": time,
            "student": student_name,
            "subject": subject,
            "status": "scheduled",
            "lesson_type": "trial",
            "from_template": False,
            "lesson_duration": lesson_duration
        }
        
        lesson_id = create_lesson(lesson_data)
        
        return f"<script>alert('–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —Å {student_name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {date} –≤ {time}!'); window.location.href='/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ';</script>"
        
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


# ============================================================================
# API –î–õ–Ø –ù–ê–ì–†–£–ó–ö–ò
# ============================================================================

@app.route("/api/available-slots")
def get_available_slots_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    slots = load_available_slots()
    return jsonify(slots)

@app.route("/api/template-week")
def get_template_week_api():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏"""
    template = load_template_week()
    return jsonify(template)

@app.route("/api/week-schedule/<int:year>/<int:week>")
def get_week_schedule_api(year, week):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
    slots = load_slots()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
    week_dates = get_week_dates(year, week)
    week_schedule = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–∞—Ç–∞–º –Ω–µ–¥–µ–ª–∏
    for date_info in week_dates:
        date_str = date_info['full_date']
        day_lessons = get_lessons_for_date(date_str, slots)
        
        for lesson in day_lessons:
            week_schedule.append({
                'date': date_str,
                'time': lesson['time'],
                'student': lesson['student'],
                'subject': lesson['subject'],
                'status': lesson.get('status', 'scheduled'),
                'lesson_type': lesson.get('lesson_type', 'regular')
            })
    
    return jsonify(week_schedule)

@app.route("/restore-lesson/<lesson_id>", methods=["POST"])
def restore_lesson(lesson_id):
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫"""
    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–∫ {lesson_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω
    lesson = get_lesson_by_id(lesson_id)
    if not lesson:
        return jsonify({"success": False, "error": "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
    
    if lesson.get('status') != 'cancelled':
        return jsonify({"success": False, "error": "–£—Ä–æ–∫ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω"}), 400
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–∫
    restore_query = "UPDATE lessons SET status = 'scheduled' WHERE id = %s"
    result = execute_query(restore_query, (lesson_id,))
    
    if result is not None:
        print(f"‚úÖ –£—Ä–æ–∫ {lesson_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return jsonify({"success": True, "message": "–£—Ä–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id}")
        return jsonify({"success": False, "error": "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"}), 500

@app.route("/—Å–æ–∑–¥–∞—Ç—å-–∞–∫–∫–∞—É–Ω—Ç—ã-—É—á–µ–Ω–∏–∫–æ–≤", methods=["GET", "POST"])
def create_existing_student_accounts():
    """–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    if request.method == "POST":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        students_query = """
            SELECT s.id, s.name, s.created_at, s.parent_name
            FROM students s
            LEFT JOIN user_accounts ua ON s.id = ua.student_id
            WHERE ua.id IS NULL
            ORDER BY s.name
        """
        students_without_accounts = execute_query(students_query, fetch=True)
        
        created_count = 0
        results = []
        
        for student in students_without_accounts:
            try:
                student_id = student['id']
                student_name = student['name']
                registration_time = student['created_at']
                
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                login, password = create_user_account(student_id, student_name, registration_time)
                
                results.append({
                    'name': student_name,
                    'login': login,
                    'password': password,
                    'status': '—É—Å–ø–µ—à–Ω–æ'
                })
                created_count += 1
                
            except Exception as e:
                results.append({
                    'name': student['name'],
                    'login': '',
                    'password': '',
                    'status': f'–æ—à–∏–±–∫–∞: {e}'
                })
        
        return render_template("create_accounts_result.html", 
                             results=results, 
                             created_count=created_count)
    
    # GET - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    students_query = """
        SELECT s.id, s.name, s.created_at, s.parent_name
        FROM students s
        LEFT JOIN user_accounts ua ON s.id = ua.student_id
        WHERE ua.id IS NULL
        ORDER BY s.name
    """
    students_without_accounts = execute_query(students_query, fetch=True)
    
    return render_template("create_accounts.html", 
                         students=students_without_accounts)

@app.route("/–ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å-–≤—Å–µ-–∞–∫–∫–∞—É–Ω—Ç—ã", methods=["GET", "POST"])
def recreate_all_accounts():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –í–°–ï–• —É—á–µ–Ω–∏–∫–æ–≤"""
    if not session.get('admin_logged_in'):
        return redirect("http://127.0.0.1:8080/admin-auth")
    
    if request.method == "POST":
        # 1. –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
        delete_query = "DELETE FROM user_accounts WHERE role IN ('student', 'parent')"
        execute_query(delete_query)
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
        students_query = "SELECT id, name, created_at, parent_name FROM students ORDER BY name"
        all_students = execute_query(students_query, fetch=True)
        
        created_count = 0
        results = []
        
        # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        for student in all_students:
            try:
                student_id = student['id']
                student_name = student['name']
                registration_time = student['created_at']
                
                # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                login, password = create_user_account(student_id, student_name, registration_time)
                
                results.append({
                    'name': student_name,
                    'login': login,
                    'password': password,
                    'parent_name': student['parent_name'],
                    'status': '—É—Å–ø–µ—à–Ω–æ'
                })
                created_count += 1
                
                print(f"‚úÖ {student_name}: {login} / {password}")
                
            except Exception as e:
                results.append({
                    'name': student['name'],
                    'login': '',
                    'password': '',
                    'parent_name': student['parent_name'],
                    'status': f'–æ—à–∏–±–∫–∞: {e}'
                })
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {student['name']}: {e}")
        
        print(f"\nüéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ {created_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results_text = f"–°–æ–∑–¥–∞–Ω–æ {created_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\\n\\n"
        for result in results:
            if result['status'] == '—É—Å–ø–µ—à–Ω–æ':
                results_text += f"‚úÖ {result['name']}: {result['login']} / {result['password']}\\n"
        
        return f"<script>alert('{results_text}'); window.location.href='/';</script>"
    
    # GET - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    students_count_query = "SELECT COUNT(*) as count FROM students"
    students_count = execute_query(students_count_query, fetch_one=True)['count']
    
    return f"""
    <html>
    <head><title>–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</title></head>
    <body style="font-family: Arial; padding: 50px; text-align: center;">
        <h1>‚ö†Ô∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</h1>
        <p>–ë—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è <strong>{students_count} —É—á–µ–Ω–∏–∫–æ–≤</strong></p>
        <p style="color: red;">–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏–Ω—ã/–ø–∞—Ä–æ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!</p>
        
        <form method="POST" style="margin-top: 30px;">
            <button type="submit" style="padding: 15px 30px; font-size: 18px; background: #e74c3c; color: white; border: none; border-radius: 8px; cursor: pointer;">
                –î–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            </button>
        </form>
        
        <a href="/" style="display: inline-block; margin-top: 20px; padding: 10px 20px; background: #95a5a6; color: white; text-decoration: none; border-radius: 8px;">
            –û—Ç–º–µ–Ω–∞
        </a>
    </body>
    </html>
    """

@app.route("/admin-logout")
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    session.clear()  # –û—á–∏—â–∞–µ–º –≤—Å—é —Å–µ—Å—Å–∏—é
    return redirect("http://127.0.0.1:8080/admin-auth")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    initialize_app()
    app.run(debug=True, host="0.0.0.0", port=5000)
